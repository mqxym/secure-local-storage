{
  "version": 3,
  "sources": ["node:path", "../../node_modules/argon2-browser/dist/argon2.js", "../../node_modules/argon2-browser/lib/argon2.js", "../../src/constants.ts", "../../src/errors.ts", "../../src/utils/base64.ts", "../../src/crypto/EncryptionManager.ts", "../../src/crypto/DeviceKeyProvider.ts", "../../src/crypto/KeyDerivation.ts", "../../src/crypto/SessionKeyCache.ts", "../../src/storage/StorageService.ts", "../../src/api/states/BaseState.ts", "../../src/utils/json.ts", "../../src/utils/secureDataView.ts", "../../src/api/states/InitialState.ts", "../../src/api/sls/Portability.ts", "../../src/api/states/DeviceModeState.ts", "../../src/api/states/MasterPasswordState.ts", "../../src/api/states/LockedState.ts", "../../src/api/sls/VersionManager.ts", "../../src/api/SecureLocalStorageStates.ts", "../../src/index.ts"],
  "sourcesContent": [
    "function assertPath(path){if(typeof path!==\"string\")throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(path))}function normalizeStringPosix(path,allowAboveRoot){var res=\"\",lastSegmentLength=0,lastSlash=-1,dots=0,code;for(var i=0;i<=path.length;++i){if(i<path.length)code=path.charCodeAt(i);else if(code===47)break;else code=47;if(code===47){if(lastSlash===i-1||dots===1);else if(lastSlash!==i-1&&dots===2){if(res.length<2||lastSegmentLength!==2||res.charCodeAt(res.length-1)!==46||res.charCodeAt(res.length-2)!==46){if(res.length>2){var lastSlashIndex=res.lastIndexOf(\"/\");if(lastSlashIndex!==res.length-1){if(lastSlashIndex===-1)res=\"\",lastSegmentLength=0;else res=res.slice(0,lastSlashIndex),lastSegmentLength=res.length-1-res.lastIndexOf(\"/\");lastSlash=i,dots=0;continue}}else if(res.length===2||res.length===1){res=\"\",lastSegmentLength=0,lastSlash=i,dots=0;continue}}if(allowAboveRoot){if(res.length>0)res+=\"/..\";else res=\"..\";lastSegmentLength=2}}else{if(res.length>0)res+=\"/\"+path.slice(lastSlash+1,i);else res=path.slice(lastSlash+1,i);lastSegmentLength=i-lastSlash-1}lastSlash=i,dots=0}else if(code===46&&dots!==-1)++dots;else dots=-1}return res}function _format(sep,pathObject){var dir=pathObject.dir||pathObject.root,base=pathObject.base||(pathObject.name||\"\")+(pathObject.ext||\"\");if(!dir)return base;if(dir===pathObject.root)return dir+base;return dir+sep+base}function resolve(){var resolvedPath=\"\",resolvedAbsolute=!1,cwd;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path;if(i>=0)path=arguments[i];else{if(cwd===void 0)cwd=process.cwd();path=cwd}if(assertPath(path),path.length===0)continue;resolvedPath=path+\"/\"+resolvedPath,resolvedAbsolute=path.charCodeAt(0)===47}if(resolvedPath=normalizeStringPosix(resolvedPath,!resolvedAbsolute),resolvedAbsolute)if(resolvedPath.length>0)return\"/\"+resolvedPath;else return\"/\";else if(resolvedPath.length>0)return resolvedPath;else return\".\"}function normalize(path){if(assertPath(path),path.length===0)return\".\";var isAbsolute=path.charCodeAt(0)===47,trailingSeparator=path.charCodeAt(path.length-1)===47;if(path=normalizeStringPosix(path,!isAbsolute),path.length===0&&!isAbsolute)path=\".\";if(path.length>0&&trailingSeparator)path+=\"/\";if(isAbsolute)return\"/\"+path;return path}function isAbsolute(path){return assertPath(path),path.length>0&&path.charCodeAt(0)===47}function join(){if(arguments.length===0)return\".\";var joined;for(var i=0;i<arguments.length;++i){var arg=arguments[i];if(assertPath(arg),arg.length>0)if(joined===void 0)joined=arg;else joined+=\"/\"+arg}if(joined===void 0)return\".\";return normalize(joined)}function relative(from,to){if(assertPath(from),assertPath(to),from===to)return\"\";if(from=resolve(from),to=resolve(to),from===to)return\"\";var fromStart=1;for(;fromStart<from.length;++fromStart)if(from.charCodeAt(fromStart)!==47)break;var fromEnd=from.length,fromLen=fromEnd-fromStart,toStart=1;for(;toStart<to.length;++toStart)if(to.charCodeAt(toStart)!==47)break;var toEnd=to.length,toLen=toEnd-toStart,length=fromLen<toLen?fromLen:toLen,lastCommonSep=-1,i=0;for(;i<=length;++i){if(i===length){if(toLen>length){if(to.charCodeAt(toStart+i)===47)return to.slice(toStart+i+1);else if(i===0)return to.slice(toStart+i)}else if(fromLen>length){if(from.charCodeAt(fromStart+i)===47)lastCommonSep=i;else if(i===0)lastCommonSep=0}break}var fromCode=from.charCodeAt(fromStart+i),toCode=to.charCodeAt(toStart+i);if(fromCode!==toCode)break;else if(fromCode===47)lastCommonSep=i}var out=\"\";for(i=fromStart+lastCommonSep+1;i<=fromEnd;++i)if(i===fromEnd||from.charCodeAt(i)===47)if(out.length===0)out+=\"..\";else out+=\"/..\";if(out.length>0)return out+to.slice(toStart+lastCommonSep);else{if(toStart+=lastCommonSep,to.charCodeAt(toStart)===47)++toStart;return to.slice(toStart)}}function _makeLong(path){return path}function dirname(path){if(assertPath(path),path.length===0)return\".\";var code=path.charCodeAt(0),hasRoot=code===47,end=-1,matchedSlash=!0;for(var i=path.length-1;i>=1;--i)if(code=path.charCodeAt(i),code===47){if(!matchedSlash){end=i;break}}else matchedSlash=!1;if(end===-1)return hasRoot?\"/\":\".\";if(hasRoot&&end===1)return\"//\";return path.slice(0,end)}function basename(path,ext){if(ext!==void 0&&typeof ext!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(path);var start=0,end=-1,matchedSlash=!0,i;if(ext!==void 0&&ext.length>0&&ext.length<=path.length){if(ext.length===path.length&&ext===path)return\"\";var extIdx=ext.length-1,firstNonSlashEnd=-1;for(i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){start=i+1;break}}else{if(firstNonSlashEnd===-1)matchedSlash=!1,firstNonSlashEnd=i+1;if(extIdx>=0)if(code===ext.charCodeAt(extIdx)){if(--extIdx===-1)end=i}else extIdx=-1,end=firstNonSlashEnd}}if(start===end)end=firstNonSlashEnd;else if(end===-1)end=path.length;return path.slice(start,end)}else{for(i=path.length-1;i>=0;--i)if(path.charCodeAt(i)===47){if(!matchedSlash){start=i+1;break}}else if(end===-1)matchedSlash=!1,end=i+1;if(end===-1)return\"\";return path.slice(start,end)}}function extname(path){assertPath(path);var startDot=-1,startPart=0,end=-1,matchedSlash=!0,preDotState=0;for(var i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1)matchedSlash=!1,end=i+1;if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1)preDotState=-1}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1)return\"\";return path.slice(startDot,end)}function format(pathObject){if(pathObject===null||typeof pathObject!==\"object\")throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof pathObject);return _format(\"/\",pathObject)}function parse(path){assertPath(path);var ret={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(path.length===0)return ret;var code=path.charCodeAt(0),isAbsolute2=code===47,start;if(isAbsolute2)ret.root=\"/\",start=1;else start=0;var startDot=-1,startPart=0,end=-1,matchedSlash=!0,i=path.length-1,preDotState=0;for(;i>=start;--i){if(code=path.charCodeAt(i),code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1)matchedSlash=!1,end=i+1;if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1)preDotState=-1}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1){if(end!==-1)if(startPart===0&&isAbsolute2)ret.base=ret.name=path.slice(1,end);else ret.base=ret.name=path.slice(startPart,end)}else{if(startPart===0&&isAbsolute2)ret.name=path.slice(1,startDot),ret.base=path.slice(1,end);else ret.name=path.slice(startPart,startDot),ret.base=path.slice(startPart,end);ret.ext=path.slice(startDot,end)}if(startPart>0)ret.dir=path.slice(0,startPart-1);else if(isAbsolute2)ret.dir=\"/\";return ret}var sep=\"/\",delimiter=\":\",posix=((p)=>(p.posix=p,p))({resolve,normalize,isAbsolute,join,relative,_makeLong,dirname,basename,extname,format,parse,sep,delimiter,win32:null,posix:null});var path_default=posix;export{sep,resolve,relative,posix,parse,normalize,join,isAbsolute,format,extname,dirname,delimiter,path_default as default,basename,_makeLong};",
    "var Module=typeof self!==\"undefined\"&&typeof self.Module!==\"undefined\"?self.Module:{};var jsModule=Module;var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var ALLOC_NORMAL=0;var ALLOC_STACK=1;function allocate(slab,allocator){var ret;if(allocator==ALLOC_STACK){ret=stackAlloc(slab.length)}else{ret=_malloc(slab.length)}if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile=\"argon2.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"c\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"k\"];addOnInit(Module[\"asm\"][\"d\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147418112;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _argon2_hash=Module[\"_argon2_hash\"]=function(){return(_argon2_hash=Module[\"_argon2_hash\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _argon2_verify=Module[\"_argon2_verify\"]=function(){return(_argon2_verify=Module[\"_argon2_verify\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _argon2_error_message=Module[\"_argon2_error_message\"]=function(){return(_argon2_error_message=Module[\"_argon2_error_message\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var _argon2_encodedlen=Module[\"_argon2_encodedlen\"]=function(){return(_argon2_encodedlen=Module[\"_argon2_encodedlen\"]=Module[\"asm\"][\"j\"]).apply(null,arguments)};var _argon2_hash_ext=Module[\"_argon2_hash_ext\"]=function(){return(_argon2_hash_ext=Module[\"_argon2_hash_ext\"]=Module[\"asm\"][\"l\"]).apply(null,arguments)};var _argon2_verify_ext=Module[\"_argon2_verify_ext\"]=function(){return(_argon2_verify_ext=Module[\"_argon2_verify_ext\"]=Module[\"asm\"][\"m\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"n\"]).apply(null,arguments)};Module[\"allocate\"]=allocate;Module[\"UTF8ToString\"]=UTF8ToString;Module[\"ALLOC_NORMAL\"]=ALLOC_NORMAL;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();if(typeof module!==\"undefined\")module.exports=Module;Module.unloadRuntime=function(){if(typeof self!==\"undefined\"){delete self.Module}Module=jsModule=wasmMemory=wasmTable=asm=buffer=HEAP8=HEAPU8=HEAP16=HEAPU16=HEAP32=HEAPU32=HEAPF32=HEAPF64=undefined;if(typeof module!==\"undefined\"){delete module.exports}};\n",
    "(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.argon2 = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function () {\n    const global = typeof self !== 'undefined' ? self : this;\n\n    /**\n     * @enum\n     */\n    const ArgonType = {\n        Argon2d: 0,\n        Argon2i: 1,\n        Argon2id: 2,\n    };\n\n    function loadModule(mem) {\n        if (loadModule._promise) {\n            return loadModule._promise;\n        }\n        if (loadModule._module) {\n            return Promise.resolve(loadModule._module);\n        }\n        let promise;\n        if (\n            global.process &&\n            global.process.versions &&\n            global.process.versions.node\n        ) {\n            promise = loadWasmModule().then(\n                (Module) =>\n                    new Promise((resolve) => {\n                        Module.postRun = () => resolve(Module);\n                    })\n            );\n        } else {\n            promise = loadWasmBinary().then((wasmBinary) => {\n                const wasmMemory = mem ? createWasmMemory(mem) : undefined;\n                return initWasm(wasmBinary, wasmMemory);\n            });\n        }\n        loadModule._promise = promise;\n        return promise.then((Module) => {\n            loadModule._module = Module;\n            delete loadModule._promise;\n            return Module;\n        });\n    }\n\n    function initWasm(wasmBinary, wasmMemory) {\n        return new Promise((resolve) => {\n            global.Module = {\n                wasmBinary,\n                wasmMemory,\n                postRun() {\n                    resolve(Module);\n                },\n            };\n            return loadWasmModule();\n        });\n    }\n\n    function loadWasmModule() {\n        if (global.loadArgon2WasmModule) {\n            return global.loadArgon2WasmModule();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.js'));\n        }\n        return import('../dist/argon2.js');\n    }\n\n    function loadWasmBinary() {\n        if (global.loadArgon2WasmBinary) {\n            return global.loadArgon2WasmBinary();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.wasm')).then(\n                (wasmModule) => {\n                    return decodeWasmBinary(wasmModule);\n                }\n            );\n        }\n        const wasmPath =\n            global.argon2WasmPath ||\n            'node_modules/argon2-browser/dist/argon2.wasm';\n        return fetch(wasmPath)\n            .then((response) => response.arrayBuffer())\n            .then((ab) => new Uint8Array(ab));\n    }\n\n    function decodeWasmBinary(base64) {\n        const text = atob(base64);\n        const binary = new Uint8Array(new ArrayBuffer(text.length));\n        for (let i = 0; i < text.length; i++) {\n            binary[i] = text.charCodeAt(i);\n        }\n        return binary;\n    }\n\n    function createWasmMemory(mem) {\n        const KB = 1024;\n        const MB = 1024 * KB;\n        const GB = 1024 * MB;\n        const WASM_PAGE_SIZE = 64 * KB;\n\n        const totalMemory = (2 * GB - 64 * KB) / WASM_PAGE_SIZE;\n        const initialMemory = Math.min(\n            Math.max(Math.ceil((mem * KB) / WASM_PAGE_SIZE), 256) + 256,\n            totalMemory\n        );\n\n        return new WebAssembly.Memory({\n            initial: initialMemory,\n            maximum: totalMemory,\n        });\n    }\n\n    function allocateArray(Module, arr) {\n        return Module.allocate(arr, 'i8', Module.ALLOC_NORMAL);\n    }\n\n    function allocateArrayStr(Module, arr) {\n        const nullTerminatedArray = new Uint8Array([...arr, 0]);\n        return allocateArray(Module, nullTerminatedArray);\n    }\n\n    function encodeUtf8(str) {\n        if (typeof str !== 'string') {\n            return str;\n        }\n        if (typeof TextEncoder === 'function') {\n            return new TextEncoder().encode(str);\n        } else if (typeof Buffer === 'function') {\n            return Buffer.from(str);\n        } else {\n            throw new Error(\"Don't know how to encode UTF8\");\n        }\n    }\n\n    /**\n     * Argon2 hash\n     * @param {string|Uint8Array} params.pass - password string\n     * @param {string|Uint8Array} params.salt - salt string\n     * @param {number} [params.time=1] - the number of iterations\n     * @param {number} [params.mem=1024] - used memory, in KiB\n     * @param {number} [params.hashLen=24] - desired hash length\n     * @param {number} [params.parallelism=1] - desired parallelism\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @return Promise\n     *\n     * @example\n     *  argon2.hash({ pass: 'password', salt: 'somesalt' })\n     *      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Hash(params) {\n        const mCost = params.mem || 1024;\n        return loadModule(mCost).then((Module) => {\n            const tCost = params.time || 1;\n            const parallelism = params.parallelism || 1;\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const saltEncoded = encodeUtf8(params.salt);\n            const salt = allocateArrayStr(Module, saltEncoded);\n            const saltlen = saltEncoded.length;\n            const argon2Type = params.type || ArgonType.Argon2d;\n            const hash = Module.allocate(\n                new Array(params.hashLen || 24),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const hashlen = params.hashLen || 24;\n            const encodedlen = Module._argon2_encodedlen(\n                tCost,\n                mCost,\n                parallelism,\n                saltlen,\n                hashlen,\n                argon2Type\n            );\n            const encoded = Module.allocate(\n                new Array(encodedlen + 1),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const version = 0x13;\n            let err;\n            let res;\n            try {\n                res = Module._argon2_hash_ext(\n                    tCost,\n                    mCost,\n                    parallelism,\n                    pwd,\n                    pwdlen,\n                    salt,\n                    saltlen,\n                    hash,\n                    hashlen,\n                    encoded,\n                    encodedlen,\n                    argon2Type,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    version\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res === 0 && !err) {\n                let hashStr = '';\n                const hashArr = new Uint8Array(hashlen);\n                for (let i = 0; i < hashlen; i++) {\n                    const byte = Module.HEAP8[hash + i];\n                    hashArr[i] = byte;\n                    hashStr += ('0' + (0xff & byte).toString(16)).slice(-2);\n                }\n                const encodedStr = Module.UTF8ToString(encoded);\n                result = {\n                    hash: hashArr,\n                    hashHex: hashStr,\n                    encoded: encodedStr,\n                };\n            } else {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(salt);\n                Module._free(hash);\n                Module._free(encoded);\n                if (ad) {\n                    Module._free(ad);\n                }\n                if (secret) {\n                    Module._free(secret);\n                }\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    /**\n     * Argon2 verify function\n     * @param {string} params.pass - password string\n     * @param {string|Uint8Array} params.encoded - encoded hash\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @returns Promise\n     *\n     * @example\n     *  argon2.verify({ pass: 'password', encoded: 'encoded-hash' })\n     *      .then(() => console.log('OK'))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Verify(params) {\n        return loadModule().then((Module) => {\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const encEncoded = encodeUtf8(params.encoded);\n            const enc = allocateArrayStr(Module, encEncoded);\n            let argon2Type = params.type;\n            if (argon2Type === undefined) {\n                let typeStr = params.encoded.split('$')[1];\n                if (typeStr) {\n                    typeStr = typeStr.replace('a', 'A');\n                    argon2Type = ArgonType[typeStr] || ArgonType.Argon2d;\n                }\n            }\n            let err;\n            let res;\n            try {\n                res = Module._argon2_verify_ext(\n                    enc,\n                    pwd,\n                    pwdlen,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    argon2Type\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res || err) {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(enc);\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    function unloadRuntime() {\n        if (loadModule._module) {\n            loadModule._module.unloadRuntime();\n            delete loadModule._promise;\n            delete loadModule._module;\n        }\n    }\n\n    return {\n        ArgonType,\n        hash: argon2Hash,\n        verify: argon2Verify,\n        unloadRuntime,\n    };\n});\n",
    "export const SLS_CONSTANTS = {\n  CURRENT_DATA_VERSION: 2 as const, // keep 2 for backward compat / tests\n  MIGRATION_TARGET_VERSION: 3 as const,\n  SUPPORTED_VERSIONS: [2, 3] as const,\n\n  // AES-GCM\n  AES: {\n    NAME: \"AES-GCM\" as const,\n    LENGTH: 256 as const,\n    IV_LENGTH: 12 as const // 96-bit nonce\n  },\n\n  // Argon2 (argon2-browser uses KiB for mem)\n  ARGON2: {\n    TYPE: \"id\" as const, // Argon2id\n    ITERATIONS: 20,\n    MEMORY_KIB: 64 * 1024,\n    PARALLELISM: 1,\n    HASH_LEN: 32 // 256-bit\n  },\n\n  // Storage\n  STORAGE_KEY: \"secure-local-storage:v2\",\n\n  // IndexedDB\n  IDB: {\n    DB_NAME: \"SLS_KEYS\",\n    STORE: \"keys\",\n    ID: \"deviceKek_v1\"\n  },\n\n  // Salt for Argon2\n  SALT_LEN: 16\n};",
    "export class SlsError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"SlsError\";\n    }\n}\n\nexport class ValidationError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"ValidationError\";\n    }\n}\n\nexport class LockedError extends SlsError {\n    constructor(message = \"Session locked\") {\n        super(message);\n        this.name = \"LockedError\";\n    }\n}\n\nexport class ModeError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"ModeError\";\n    }\n}\n\nexport class StorageFullError extends SlsError {\n    constructor(message = \"localStorage quota exceeded\") {\n        super(message);\n        this.name = \"StorageFullError\";\n    }\n}\n\nexport class CryptoError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"CryptoError\";\n    }\n}\n\nexport class ImportError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"ImportError\";\n    }\n}\n\nexport class ExportError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"ExportError\";\n    }\n}\n\nexport class NotSupportedError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"NotSupportedError\";\n    }\n}\n\nexport class PersistenceError extends SlsError {\n    constructor(message: string) {\n        super(message);\n        this.name = \"PersistenceError\";\n    }\n}\n",
    "export function bytesToBase64(bytes: ArrayBuffer | Uint8Array): string {\n  const u8 = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n  if (u8.byteLength === 0) return \"\";\n  let binary = \"\";\n  for (let i = 0; i < u8.length; i++) binary += String.fromCharCode(u8[i] as number);\n  if (typeof btoa === \"function\") return btoa(binary);\n  // @ts-ignore\n  return Buffer.from(binary, \"binary\").toString(\"base64\");\n}\n\nimport { ValidationError } from \"../errors\";\n\nconst MAX_BASE64_LEN = 1024 * 1024; \n\nexport function base64ToBytes(b64: string): Uint8Array {\n  if (typeof b64 !== \"string\" || b64.trim().length === 0) {\n    throw new ValidationError(\"Base64 input must be a non-empty string\");\n  }\n  \n  const cleaned = b64.replace(/\\s+/g, \"\").replace(/-/g, \"+\").replace(/_/g, \"/\");\n  if (cleaned.length > MAX_BASE64_LEN) {\n    throw new ValidationError(\"Base64 input too large\");\n  }\n\n  try {\n    // normalize: remove whitespace, convert URL-safe to standard, add padding\n    const cleaned = b64.replace(/\\s+/g, \"\").replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const pad = cleaned.length % 4;\n    const normalized = pad === 0 ? cleaned : cleaned + \"=\".repeat(4 - pad);\n\n    if (typeof atob === \"function\") {\n      const binary = atob(normalized);\n      const out = new Uint8Array(binary.length);\n      for (let i = 0; i < binary.length; i++) out[i] = binary.charCodeAt(i);\n      return out;\n    }\n    // @ts-ignore\n    const buf = Buffer.from(normalized, \"base64\");\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  } catch {\n    throw new ValidationError(\"Invalid base64 input\");\n  }\n}",
    "import { SLS_CONSTANTS } from \"../constants\";\nimport { base64ToBytes, bytesToBase64 } from \"../utils/base64\";\nimport { CryptoError, ValidationError } from \"../errors\";\n\nfunction toArrayBuffer(u8: Uint8Array): ArrayBuffer {\n  if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength && u8.buffer instanceof ArrayBuffer) {\n    return u8.buffer as ArrayBuffer;\n  }\n  return u8.slice().buffer as ArrayBuffer;\n}\n\nexport class EncryptionManager {\n  generateSaltB64(): string {\n    const salt = new Uint8Array(SLS_CONSTANTS.SALT_LEN);\n    crypto.getRandomValues(salt);\n    return bytesToBase64(salt);\n  }\n\n  async createDek(): Promise<CryptoKey> {\n    try {\n      return await crypto.subtle.generateKey(\n        { name: SLS_CONSTANTS.AES.NAME, length: SLS_CONSTANTS.AES.LENGTH },\n        true,\n        [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n      );\n    } catch (e) {\n      throw new CryptoError(`Failed to generate DEK: ${(e as Error)?.message ?? e}`);\n    }\n  }\n\n  async encryptData(\n    key: CryptoKey,\n    obj: unknown,\n    aad?: Uint8Array\n  ): Promise<{ iv: string; ciphertext: string }> {\n    try {\n      this.assertKey(key, [\"encrypt\"], \"encryptData()\");\n      const iv = new Uint8Array(SLS_CONSTANTS.AES.IV_LENGTH);\n      crypto.getRandomValues(iv);\n      const data = new TextEncoder().encode(JSON.stringify(obj));\n      const algo: AesGcmParams = aad\n        ? { name: SLS_CONSTANTS.AES.NAME, iv: iv as BufferSource, additionalData: aad as BufferSource}\n        : { name: SLS_CONSTANTS.AES.NAME, iv: iv as BufferSource};\n\n      const ct = await crypto.subtle.encrypt(algo, key, toArrayBuffer(data));\n      return { iv: bytesToBase64(iv), ciphertext: bytesToBase64(ct) };\n    } catch (e) {\n      throw new CryptoError(`Encryption failed: ${(e as Error)?.message ?? e}`);\n    }\n  }\n\n  async decryptData<T = unknown>(\n    key: CryptoKey,\n    ivB64: string,\n    ctB64: string,\n    aad?: Uint8Array\n  ): Promise<T> {\n    if (!ivB64 || !ctB64) throw new ValidationError(\"IV and ciphertext are required\");\n\n    const ivBytes = base64ToBytes(ivB64) as BufferSource;\n    const ct = base64ToBytes(ctB64);\n\n    if (ivBytes.byteLength !== SLS_CONSTANTS.AES.IV_LENGTH) {\n      throw new ValidationError(`IV must be ${SLS_CONSTANTS.AES.IV_LENGTH} bytes`);\n    }\n\n    this.assertKey(key, [\"decrypt\"], \"decryptData()\");\n\n    let pt: ArrayBuffer;\n    try {\n      const algo: AesGcmParams = aad\n        ? { name: SLS_CONSTANTS.AES.NAME, iv: ivBytes as BufferSource, additionalData: aad as BufferSource }\n        : { name: SLS_CONSTANTS.AES.NAME, iv: ivBytes as BufferSource };\n      pt = await crypto.subtle.decrypt(algo, key, toArrayBuffer(ct));\n    } catch (e) {\n      throw new CryptoError(`Invalid key or data.`);\n    }\n\n    try {\n      return JSON.parse(new TextDecoder().decode(pt)) as T;\n    } catch {\n      throw new ValidationError(\"Decrypted data is not valid JSON\");\n    }\n  }\n\n  async unwrapDek(\n    ivWrapB64: string,\n    wrappedB64: string,\n    kek: CryptoKey,\n    forWrapping = false,\n    aad?: Uint8Array\n  ): Promise<CryptoKey> {\n    const ivBytes = base64ToBytes(ivWrapB64) as BufferSource; // may throw ValidationError\n    const wrapped = base64ToBytes(wrappedB64);\n\n    if (ivBytes.byteLength !== SLS_CONSTANTS.AES.IV_LENGTH) {\n      throw new ValidationError(`Wrap IV must be ${SLS_CONSTANTS.AES.IV_LENGTH} bytes`);\n    }\n\n    try {\n      this.assertKey(kek, [\"unwrapKey\"], \"unwrapDek()\");\n      const algo: AesGcmParams = aad\n        ? { name: SLS_CONSTANTS.AES.NAME, iv: ivBytes as BufferSource, additionalData: aad as BufferSource }\n        : { name: SLS_CONSTANTS.AES.NAME, iv: ivBytes as BufferSource };\n\n      return await crypto.subtle.unwrapKey(\n        \"raw\",\n        toArrayBuffer(wrapped),\n        kek,\n        algo,\n        { name: SLS_CONSTANTS.AES.NAME, length: SLS_CONSTANTS.AES.LENGTH },\n        forWrapping,\n        forWrapping ? [\"wrapKey\", \"unwrapKey\", \"encrypt\", \"decrypt\"] : [\"encrypt\", \"decrypt\"]\n      );\n    } catch {\n      throw new CryptoError(\"Invalid key or data.\");\n    }\n  }\n\n  async wrapDek(\n    dek: CryptoKey,\n    kek: CryptoKey,\n    aad?: Uint8Array\n  ): Promise<{ ivWrap: string; wrappedKey: string }> {\n    try {\n      this.assertKey(kek, [\"wrapKey\"], \"wrapDek()\");\n      const iv = new Uint8Array(SLS_CONSTANTS.AES.IV_LENGTH);\n      crypto.getRandomValues(iv);\n      const algo: AesGcmParams = aad\n        ? { name: SLS_CONSTANTS.AES.NAME, iv: iv as BufferSource, additionalData: aad  as BufferSource}\n        : { name: SLS_CONSTANTS.AES.NAME, iv:iv as BufferSource };\n      const wrapped = await crypto.subtle.wrapKey(\"raw\", dek, kek, algo);\n      return { ivWrap: bytesToBase64(iv), wrappedKey: bytesToBase64(wrapped) };\n    } catch (e) {\n      throw new CryptoError(`wrapKey failed: ${(e as Error)?.message ?? e}`);\n    }\n  }\n\n  private assertKey(key: CryptoKey, required: KeyUsage[], where: string): void {\n    if (!key || (key.algorithm as { name?: string })?.name !== SLS_CONSTANTS.AES.NAME) {\n      throw new ValidationError(`Invalid key algorithm for ${where}; expected ${SLS_CONSTANTS.AES.NAME}`);\n    }\n    for (const u of required) {\n      if (!key.usages.includes(u)) {\n        throw new ValidationError(`Key missing \"${u}\" usage for ${where}`);\n      }\n    }\n  } \n}",
    "import { SLS_CONSTANTS } from \"../constants\";\nimport { NotSupportedError } from \"../errors\";\n\n/** Public shape for configuring where the device KEK is persisted. */\nexport interface IdbConfig {\n  dbName: string;\n  storeName: string;\n  keyId: string;\n}\n\n/** Resolve partial config to concrete values using current defaults. */\nfunction resolveIdbConfig(cfg?: Partial<IdbConfig>): IdbConfig {\n  return {\n    dbName: cfg?.dbName ?? SLS_CONSTANTS.IDB.DB_NAME,\n    storeName: cfg?.storeName ?? SLS_CONSTANTS.IDB.STORE,\n    keyId: cfg?.keyId ?? SLS_CONSTANTS.IDB.ID\n  };\n}\n\n/** Build a stable in-memory identity per (dbName, storeName, keyId). */\nfunction memKeyId(cfg: IdbConfig): string {\n  return `${cfg.dbName}::${cfg.storeName}::${cfg.keyId}`;\n}\n\n/**\n * Persists a non-extractable AES-GCM KEK in IndexedDB (origin-bound).\n * Falls back to an in-memory key if IndexedDB is unavailable or rejects storing CryptoKey.\n *\n * Now supports per-instance configuration of the IndexedDB DB/store/key id via IdbConfig.\n * If you don't pass a config, it uses SLS_CONSTANTS.IDB defaults (fully backwards compatible).\n */\nexport class DeviceKeyProvider {\n  // Keep one in-memory key per (dbName, storeName, keyId)\n  private static memoryKeys = new Map<string, CryptoKey>();\n\n  static async getKey(cfgIn?: Partial<IdbConfig>): Promise<CryptoKey> {\n    const cfg = resolveIdbConfig(cfgIn);\n    const mk = memKeyId(cfg);\n\n    // Prefer in-memory identity within the current session.\n    const existingMem = this.memoryKeys.get(mk);\n    if (existingMem) return existingMem;\n\n    // If IndexedDB not available, use memory fallback\n    if (!globalThis.indexedDB) {\n      const k = await this.generateKek();\n      this.memoryKeys.set(mk, k);\n      return k;\n    }\n\n    const db = await this.openDB(cfg).catch(() => null);\n    try {\n      if (!db) {\n        const k = await this.generateKek();\n        this.memoryKeys.set(mk, k);\n        return k;\n      }\n\n      const existing: CryptoKey | undefined = await new Promise((resolve, reject) => {\n        const tx = db.transaction(cfg.storeName, \"readonly\");\n        const req = tx.objectStore(cfg.storeName).get(cfg.keyId);\n        req.onsuccess = () => resolve((req.result?.key as CryptoKey) || undefined);\n        req.onerror = () => reject(req.error);\n      });\n\n      if (existing) {\n        this.memoryKeys.set(mk, existing);\n        return existing;\n      }\n\n      // Nothing persisted -> generate and try to persist\n      const key = await this.generateKek();\n\n      await new Promise<void>((resolve, reject) => {\n        const tx = db.transaction(cfg.storeName, \"readwrite\");\n        const put = tx.objectStore(cfg.storeName).put({ id: cfg.keyId, key });\n        put.onsuccess = () => resolve();\n        put.onerror = () => reject(put.error);\n      }).catch(() => {\n        // Storing CryptoKey failed (e.g., structured clone not supported) -> ignore and fall back to memory\n      });\n\n      // Prefer in-memory identity within the session\n      this.memoryKeys.set(mk, key);\n      return key;\n    } catch {\n      // Any unexpected failure -> ensure we still return a usable key\n      let k = this.memoryKeys.get(mk);\n      if (!k) {\n        k = await this.generateKek();\n        this.memoryKeys.set(mk, k);\n      }\n      return k;\n    } finally {\n      if (db) db.close();\n    }\n  }\n\n  static async rotateKey(cfgIn?: Partial<IdbConfig>): Promise<CryptoKey> {\n    const cfg = resolveIdbConfig(cfgIn);\n    const mk = memKeyId(cfg);\n\n    const newKey = await this.generateKek();\n\n    if (!globalThis.indexedDB) {\n      this.memoryKeys.set(mk, newKey);\n      return newKey;\n    }\n\n    const db = await this.openDB(cfg).catch(() => null);\n    try {\n      if (!db) {\n        this.memoryKeys.set(mk, newKey);\n        return newKey;\n      }\n      await new Promise<void>((resolve, reject) => {\n        const tx = db.transaction(cfg.storeName, \"readwrite\");\n        const put = tx.objectStore(cfg.storeName).put({ id: cfg.keyId, key: newKey });\n        put.onsuccess = () => resolve();\n        put.onerror = () => reject(put.error);\n      });\n      // Keep identity stable within session\n      this.memoryKeys.set(mk, newKey);\n      return newKey;\n    } catch {\n      this.memoryKeys.set(mk, newKey);\n      return newKey;\n    } finally {\n      if (db) db.close();\n    }\n  }\n\n  /**\n   * Remove persisted key material for this configuration and clear the in-memory copy.\n   * For backward compatibility with the original implementation, this deletes the whole DB\n   * (default DB name), which is fine when you use distinct dbName per tenant/config.\n   * If you prefer surgical deletes, switch to opening the DB and deleting only the record.\n   */\n  static async deletePersistent(cfgIn?: Partial<IdbConfig>): Promise<void> {\n    const cfg = resolveIdbConfig(cfgIn);\n    this.memoryKeys.delete(memKeyId(cfg));\n\n    if (!globalThis.indexedDB) return;\n\n    // Prefer surgical delete of only the targeted keyId.\n    const db = await this.openDB(cfg).catch(() => null);\n    if (db) {\n      try {\n        await new Promise<void>((resolve, reject) => {\n          const tx = db.transaction(cfg.storeName, \"readwrite\");\n          const del = tx.objectStore(cfg.storeName).delete(cfg.keyId);\n          del.onsuccess = () => resolve();\n          del.onerror = () => reject(del.error);\n        });\n        db.close();\n        return;\n      } catch {\n        // fall through to full DB delete\n        db.close();\n      }\n    }\n\n    // Fallback: delete the whole DB \n    await new Promise<void>((resolve) => {\n      const req = indexedDB.deleteDatabase(cfg.dbName);\n      req.onsuccess = () => resolve();\n      req.onerror = () => resolve(); \n    });\n}\n\n  // --------------------------- private helpers ---------------------------\n\n  private static async generateKek(): Promise<CryptoKey> {\n    return await crypto.subtle.generateKey(\n      { name: SLS_CONSTANTS.AES.NAME, length: SLS_CONSTANTS.AES.LENGTH },\n      false,\n      [\"wrapKey\", \"unwrapKey\"]\n    );\n  }\n\n  private static openDB(cfg: IdbConfig): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      try {\n        const req = indexedDB.open(cfg.dbName, 1);\n        req.onupgradeneeded = () => {\n          if (!req.result.objectStoreNames.contains(cfg.storeName)) {\n            req.result.createObjectStore(cfg.storeName, { keyPath: \"id\" });\n          }\n        };\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () =>\n          reject(new NotSupportedError(req.error?.message ?? \"IndexedDB error\"));\n      } catch (e) {\n        reject(new NotSupportedError((e as Error)?.message ?? \"IndexedDB unavailable\"));\n      }\n    });\n  }\n}",
    "import { SLS_CONSTANTS } from \"../constants\";\nimport { CryptoError, ValidationError } from \"../errors\";\nimport * as argon2 from \"argon2-browser\";\n\nfunction toArrayBuffer(u8: Uint8Array): ArrayBuffer {\n  if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength && u8.buffer instanceof ArrayBuffer) {\n    return u8.buffer as ArrayBuffer;\n  }\n  return u8.slice().buffer as ArrayBuffer;\n}\n\nexport async function deriveKekFromPassword(\n  password: string,\n  salt: Uint8Array,\n  iterations = SLS_CONSTANTS.ARGON2.ITERATIONS\n): Promise<CryptoKey> {\n  if (typeof password !== \"string\" || password.length === 0) {\n    throw new ValidationError(\"Password must be a non-empty string\");\n  }\n  \n  if (!(salt instanceof Uint8Array) || salt.byteLength !== SLS_CONSTANTS.SALT_LEN) {\n    throw new ValidationError(`Salt must be Uint8Array of length ${SLS_CONSTANTS.SALT_LEN}`);\n  }\n\n  const MAX_ITERATIONS = 64;\n  if (!Number.isInteger(iterations) || iterations < 1 || iterations > MAX_ITERATIONS) {\n    throw new ValidationError(`iterations must be an integer in [1, ${MAX_ITERATIONS}]`);\n  }\n\n  let result: { hash: Uint8Array };\n  try {\n    result = await argon2.hash({\n      pass: password,\n      salt,\n      time: iterations,\n      mem: SLS_CONSTANTS.ARGON2.MEMORY_KIB,\n      hashLen: SLS_CONSTANTS.ARGON2.HASH_LEN,\n      parallelism: SLS_CONSTANTS.ARGON2.PARALLELISM,\n      type: argon2.ArgonType.Argon2id\n    });\n  } catch (e) {\n    throw new CryptoError(`Argon2 derivation failed: ${(e as Error)?.message ?? e}`);\n  }\n\n  if (!result?.hash) throw new CryptoError(\"Argon2 returned no hash\");\n\n  try {\n    return await crypto.subtle.importKey(\n      \"raw\",\n      toArrayBuffer(result.hash),\n      { name: SLS_CONSTANTS.AES.NAME, length: SLS_CONSTANTS.AES.LENGTH },\n      false,\n      [\"wrapKey\", \"unwrapKey\"]\n    );\n  } catch (e) {\n    throw new CryptoError(`Failed to import derived key: ${(e as Error)?.message ?? e}`);\n  }\n}",
    "/**\n * Caches a derived KEK (CryptoKey) for master password sessions.\n * Key is non-extractable and kept only in RAM.\n */\nexport class SessionKeyCache {\n  private key: CryptoKey | null = null;\n  private saltB64: string | null = null;\n  private rounds: number | null = null;\n\n  set(key: CryptoKey, saltB64: string, rounds: number) {\n    this.key = key;\n    this.saltB64 = saltB64;\n    this.rounds = rounds;\n  }\n\n  match(saltB64: string, rounds: number): CryptoKey | null {\n    if (!this.key) return null;\n    if (this.saltB64 === saltB64 && this.rounds === rounds) return this.key;\n    return null;\n  }\n\n  clear() {\n    this.key = null;\n    this.saltB64 = null;\n    this.rounds = null;\n  }\n}",
    "import { SLS_CONSTANTS } from \"../constants\";\nimport { type PersistedConfig } from \"../types\";\nimport { StorageFullError, PersistenceError } from \"../errors\";\n\nfunction estimateBytes(s: string): number {\n  try { return new Blob([s]).size; } catch { return s.length; }\n}\n\nexport class StorageService {\n  private key: string;\n\n  constructor(key: string = SLS_CONSTANTS.STORAGE_KEY) {\n    this.key = key;\n  }\n\n  get(): PersistedConfig | null {\n    const raw = localStorage.getItem(this.key);\n    if (!raw) return null;\n    try { return JSON.parse(raw) as PersistedConfig; } catch { return null; }\n  }\n\n  _isQuotaExceeded(err: unknown): boolean {\n    const e = err as { name?: string; code?: number; message?: string };\n    const name = e?.name ?? \"\";\n    const msg = e?.message ?? \"\";\n    const code = e?.code;\n\n    return (\n      name === \"QuotaExceededError\" ||\n      name === \"NS_ERROR_DOM_QUOTA_REACHED\" ||\n      code === 22 ||            // legacy Safari / WebKit\n      code === 1014 ||          // Firefox DOMException\n      /quota/i.test(msg)        // generic safety net\n    );\n  }\n\n  set(cfg: PersistedConfig): void {\n    const serialized = JSON.stringify(cfg);\n    try {\n      localStorage.setItem(this.key, serialized);\n      const check = localStorage.getItem(this.key);\n      if (check !== serialized) throw new StorageFullError(\"Failed to persist data\");\n    } catch (e) {\n      if (this._isQuotaExceeded(e)) {\n        throw new StorageFullError(`localStorage quota exceeded (${estimateBytes(serialized)} bytes)`);\n      }\n      const msg = (e as Error)?.message ?? String(e);\n      throw new PersistenceError(`Failed to persist data: ${msg}`);\n    }\n  }\n\n  clear(): void {\n    try { localStorage.removeItem(this.key); } catch { /* ignore */ }\n  }\n}",
    "import type { SecureLocalStorage } from \"../SecureLocalStorageStates\";\n\nexport abstract class State {\n  constructor(protected context: SecureLocalStorage) {}\n\n  abstract isUsingMasterPassword(): boolean;\n  abstract isLocked(): boolean;\n  abstract unlock(masterPassword: string): Promise<void>;\n  abstract setMasterPassword(masterPassword: string): Promise<void>;\n  abstract removeMasterPassword(): Promise<void>;\n  abstract rotateMasterPassword(oldMasterPassword: string, newMasterPassword: string): Promise<void>;\n  abstract lock(): void;\n  abstract rotateKeys(): Promise<void>;\n  abstract getData<T extends Record<string, unknown>>(): Promise<any>;\n  abstract setData<T extends Record<string, unknown>>(value: T): Promise<void>;\n  abstract exportData(customExportPassword?: string): Promise<string>;\n  abstract importData(serialized: string, password?: string): Promise<string>;\n  abstract clear(): Promise<void>;\n  abstract initialize(forceFresh?: boolean): Promise<void>;\n\n  protected transitionTo(state: State): void {\n    this.context.transitionTo(state);\n  }\n}",
    "import { ValidationError } from \"../errors\";\n\n/**\n * Ensures a value is JSON-serializable (no functions / symbols / circular refs).\n * Returns a deep-cloned plain JSON object.\n */\nexport function toPlainJson<T>(value: T): T {\n  const seen = new WeakSet<object>();\n  const replacer = (_key: string, v: unknown) => {\n    const t = typeof v;\n    if (t === \"function\" || t === \"symbol\") {\n      throw new ValidationError(\"Data must be JSON-serializable (no functions/symbols)\");\n    }\n    if (v && t === \"object\") {\n      const o = v as object;\n      if (seen.has(o)) {\n        throw new ValidationError(\"Data must be JSON-serializable (no circular references)\");\n      }\n      seen.add(o);\n    }\n    return v;\n  };\n\n  try {\n    return JSON.parse(JSON.stringify(value, replacer)) as T;\n  } catch (e) {\n    if (e instanceof ValidationError) throw e;\n    throw new ValidationError(\"Data must be JSON-serializable\");\n  }\n}\n\nexport function safeParseJson<T>(text: string): T {\n  try {\n    return JSON.parse(text) as T;\n  } catch {\n    throw new ValidationError(\"Invalid JSON input\");\n  }\n}\n",
    "import { LockedError, ValidationError } from \"../errors\";\n\nexport type SecureDataView<T extends Record<string, unknown>> = T & {\n  clear(): void;\n};\n\nexport function makeSecureDataView<T extends Record<string, unknown>>(payloadIn: T): SecureDataView<T> {\n  let cleared = false;\n  let payload: T = payloadIn;\n  let nestedCache: WeakMap<object, object> = new WeakMap<object, object>(); // <-- make it reassignable\n\n  function clear(): void {\n    const overwrite = (obj: unknown) => {\n      if (!obj || typeof obj !== \"object\") return;\n      const rec = obj as Record<string, unknown>;\n      for (const key of Object.keys(rec)) {\n        const v = rec[key];\n        if (v && typeof v === \"object\") overwrite(v);\n        rec[key] = null;\n      }\n    };\n    overwrite(payload);\n    cleared = true;\n    payload = {} as T;\n    nestedCache = new WeakMap<object, object>();\n  }\n\n  const readonlyError = () => new ValidationError(\"SecureDataView is read-only; mutate via setData()\");\n\n  const wrapNested = (obj: unknown): unknown => {\n    if (!obj || typeof obj !== \"object\") return obj;\n    const cached = nestedCache.get(obj);\n    if (cached) return cached;\n\n    const proxied = new Proxy(obj as Record<string, unknown>, {\n      get(target, prop: string | symbol) {\n        if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const v = (target as any)[prop];\n        return typeof v === \"object\" && v !== null ? wrapNested(v) : v;\n      },\n      set() { throw readonlyError(); },\n      defineProperty() { throw readonlyError(); },\n      deleteProperty() { throw readonlyError(); },\n      ownKeys(target) {\n        if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n        return Reflect.ownKeys(target);\n      },\n      getOwnPropertyDescriptor(target, prop) {\n        if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n        if (Object.prototype.hasOwnProperty.call(target, prop)) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const value = (target as any)[prop];\n          return { configurable: true, enumerable: true, writable: false, value };\n        }\n        return undefined;\n      },\n      has(target, prop) {\n        if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n        return Reflect.has(target, prop);\n      }\n    });\n\n    nestedCache.set(obj, proxied);\n    return proxied;\n  };\n\n  const handler: ProxyHandler<Record<string, unknown>> = {\n    get(_, prop: string | symbol) {\n      if (prop === \"clear\") return clear;\n      if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const v = (payload as any)[prop];\n      return typeof v === \"object\" && v !== null ? wrapNested(v) : v;\n    },\n    set() { throw readonlyError(); },\n    defineProperty() { throw readonlyError(); },\n    deleteProperty() { throw readonlyError(); },\n    ownKeys() {\n      if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n      return [...Object.keys(payload), \"clear\"];\n    },\n    getOwnPropertyDescriptor(_, prop: string | symbol) {\n      if (prop === \"clear\") return { configurable: true, enumerable: true, writable: false, value: clear };\n      if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n      if (Object.prototype.hasOwnProperty.call(payload, prop)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const value = (payload as any)[prop];\n        return { configurable: true, enumerable: true, writable: false, value };\n      }\n      return undefined;\n    },\n    has(_, prop) {\n      if (prop === \"clear\") return true;\n      if (cleared) throw new LockedError(\"Decrypted data was cleared\");\n      return Object.prototype.hasOwnProperty.call(payload, prop);\n    }\n  };\n\n  return new Proxy<Record<string, unknown>>({} as never, handler) as SecureDataView<T>;\n}",
    "import { State } from \"./BaseState\";\nimport { DeviceModeState } from \"./DeviceModeState\";\nimport { LockedState } from \"./LockedState\";\nimport type { PersistedConfigV3 } from \"../../types\";\nimport { SLS_CONSTANTS } from \"../../constants\";\n\nexport class InitialState extends State {\n  async initialize(forceFresh = false): Promise<void> {\n    if (forceFresh) {\n      await this.createNewStore();\n      return;\n    }\n\n    const existing = this.context.store.get();\n    if (!this.context.versionManager.isValidConfig(existing)) {\n      this.context.lastResetReason = \"invalid-config\";\n      await this.createNewStore();\n      return;\n    }\n\n    this.context.config = existing;\n\n    if ((this.context.config?.header.rounds ?? 1) > 1) {\n      this.transitionTo(new LockedState(this.context));\n    } else {\n      const deviceKek = await this.context.deviceKeyProvider.getKey(this.context.idbConfig);\n      try {\n        await this.context.unwrapDekWithKek(deviceKek, false, this.context.versionManager.getAadFor(\"wrap\", existing));\n\n        if (this.context.versionManager.isV2(existing)) {\n          await this.context.migrateV2ToV3(\"device\", existing, deviceKek);\n        }\n        this.transitionTo(new DeviceModeState(this.context));\n      } catch {\n        this.context.lastResetReason = \"device-kek-mismatch\";\n        await this.createNewStore();\n      }\n    }\n  }\n\n  private async createNewStore(): Promise<void> {\n    const dek = await this.context.enc.createDek();\n    const deviceKek = await this.context.deviceKeyProvider.getKey(this.context.idbConfig);\n\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n    const wrapAad = this.context.versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const { ivWrap, wrappedKey } = await this.context.enc.wrapDek(dek, deviceKek, wrapAad);\n    const unwrappedDek = await this.context.enc.unwrapDek(ivWrap, wrappedKey, deviceKek, false, wrapAad);\n\n    const dataAad = this.context.versionManager.buildDataAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, ivWrap, wrappedKey);\n    const { iv, ciphertext } = await this.context.enc.encryptData(unwrappedDek, {}, dataAad);\n\n    this.context.config = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: \"\",\n        rounds: 1,\n        iv: ivWrap,\n        wrappedKey,\n        ctx\n      },\n      data: { iv, ciphertext }\n    };\n    this.context.dek = unwrappedDek;\n    this.context.persist();\n    this.transitionTo(new DeviceModeState(this.context));\n  }\n\n  isUsingMasterPassword(): boolean { throw new Error(\"Not initialized\"); }\n  isLocked(): boolean { throw new Error(\"Not initialized\"); }\n  unlock(masterPassword: string): Promise<void> { throw new Error(\"Not initialized\"); }\n  setMasterPassword(masterPassword: string): Promise<void> { throw new Error(\"Not initialized\"); }\n  removeMasterPassword(): Promise<void> { throw new Error(\"Not initialized\"); }\n  rotateMasterPassword(oldMasterPassword: string, newMasterPassword: string): Promise<void> { throw new Error(\"Not initialized\"); }\n  lock(): void { throw new Error(\"Not initialized\"); }\n  rotateKeys(): Promise<void> { throw new Error(\"Not initialized\"); }\n  getData<T extends Record<string, unknown>>(): Promise<any> { throw new Error(\"Not initialized\"); }\n  setData<T extends Record<string, unknown>>(value: T): Promise<void> { throw new Error(\"Not initialized\"); }\n  exportData(customExportPassword?: string): Promise<string> { throw new Error(\"Not initialized\"); }\n  importData(serialized: string, password?: string): Promise<string> { throw new Error(\"Not initialized\"); }\n  async clear(): Promise<void> {\n    this.context.session.clear();\n    this.context.dek = null;\n    this.context.store.clear();\n    await this.context.deviceKeyProvider.deletePersistent(this.context.idbConfig);\n    await this.initialize(true);\n  }\n}",
    "// Portability.ts\nimport { SLS_CONSTANTS } from \"../../constants\";\nimport { ImportError } from \"../../errors\";\nimport type { PersistedConfig, PersistedConfigV3 } from \"../../types\";\n\nexport type ExportSpec = {\n  dek: CryptoKey;\n  kek: CryptoKey;              // the KEK to wrap DEK for this bundle\n  saltB64: string;             // salt to embed in bundle header\n  rounds: number;              // argon2 rounds to embed\n  mPw: boolean;                // header.mPw\n};\n\nexport const Portability = {\n  buildExportBundle: async (\n    enc: any,\n    versionManager: any,\n    spec: ExportSpec,\n    plainDataObj: unknown\n  ): Promise<string> => {\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"export\";\n    const wrapAad = versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const { ivWrap, wrappedKey } = await enc.wrapDek(spec.dek, spec.kek, wrapAad);\n\n    const dataAad = versionManager.buildDataAad(\n      ctx,\n      SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n      ivWrap,\n      wrappedKey\n    );\n    const { iv, ciphertext } = await enc.encryptData(spec.dek, plainDataObj, dataAad);\n\n    const bundle: PersistedConfigV3 = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: spec.saltB64,\n        rounds: spec.rounds,\n        iv: ivWrap,\n        wrappedKey,\n        mPw: spec.mPw,\n        ctx\n      },\n      data: { iv, ciphertext }\n    };\n    return JSON.stringify(bundle);\n  },\n\n  parseAndClassify: (json: string, supported: readonly (2 | 3)[]) => {\n    let t: unknown;\n    try { t = JSON.parse(json); } catch { throw new ImportError(\"Invalid export structure\"); }\n    if (!t || typeof t !== \"object\" || !(t as any).header || !(t as any).data) {\n      throw new ImportError(\"Invalid export structure\");\n    }\n    const bundle = t as PersistedConfig;\n    if (!supported.includes((bundle.header.v as 2 | 3))) {\n      throw new ImportError(`Unsupported export version ${String((bundle as any).header?.v)}`);\n    }\n    const isMasterProtected =\n      (bundle as any).header.mPw === true ||\n      ((bundle.header as any).rounds > 1 && (bundle as any).header.mPw !== false);\n    return { bundle, isMasterProtected };\n  }\n};",
    "import { State } from \"./BaseState\";\nimport { MasterPasswordState } from \"./MasterPasswordState\";\nimport { ModeError, ValidationError } from \"../../errors\";\nimport { SLS_CONSTANTS } from \"../../constants\";\nimport { base64ToBytes } from \"../../utils/base64\";\nimport { toPlainJson } from \"../../utils/json\";\nimport { makeSecureDataView, SecureDataView } from \"../../utils/secureDataView\";\nimport type { PersistedConfigV3 } from \"../../types\";\nimport { InitialState } from \"./InitialState\";\nimport { ExportSpec, Portability } from \"../sls/Portability\";\nimport { ExportError } from \"../../errors\";\n\nexport class DeviceModeState extends State {\n  isUsingMasterPassword(): boolean {\n    return false;\n  }\n\n  isLocked(): boolean {\n    return false;\n  }\n\n  async unlock(masterPassword: string): Promise<void> {\n    // No-op in device mode\n  }\n\n  async setMasterPassword(masterPassword: string): Promise<void> {\n    this.context.requireConfig();\n    const pw = typeof masterPassword === \"string\" ? masterPassword.trim() : \"\";\n    if (pw.length === 0) {\n      throw new ValidationError(\"masterPassword must be a non-empty string\");\n    }\n\n    const deviceKek = await this.context.deviceKeyProvider.getKey(this.context.idbConfig);\n    await this.context.unwrapDekWithKek(deviceKek, true, this.context.versionManager.getAadFor(\"wrap\", this.context.config!));\n\n    const plain = await this.context.decryptCurrentData();\n\n    const saltB64 = this.context.enc.generateSaltB64();\n    const rounds = SLS_CONSTANTS.ARGON2.ITERATIONS;\n    const kek = await this.context.deriveKekFromPassword(masterPassword, base64ToBytes(saltB64), rounds);\n\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n    const wrapAad = this.context.versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const wrapped = await this.context.enc.wrapDek(this.context.dek!, kek, wrapAad);\n\n    const dataAad = this.context.versionManager.buildDataAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, wrapped.ivWrap, wrapped.wrappedKey);\n    const { iv, ciphertext } = await this.context.enc.encryptData(this.context.dek!, plain, dataAad);\n\n    this.context.config = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: saltB64,\n        rounds,\n        iv: wrapped.ivWrap,\n        wrappedKey: wrapped.wrappedKey,\n        ctx\n      },\n      data: { iv, ciphertext }\n    };\n\n    this.context.session.set(kek, saltB64, rounds);\n    this.context.dek = await this.context.enc.unwrapDek(wrapped.ivWrap, wrapped.wrappedKey, kek, false, wrapAad);\n    this.context.persist();\n    this.transitionTo(new MasterPasswordState(this.context));\n  }\n\n  async removeMasterPassword(): Promise<void> {\n    throw new ModeError(\"No master password is set\");\n  }\n\n  async rotateMasterPassword(oldMasterPassword: string, newMasterPassword: string): Promise<void> {\n    const newPw = typeof newMasterPassword === \"string\" ? newMasterPassword.trim() : \"\";\n    if (newPw.length === 0) {\n      throw new ValidationError(\"newMasterPassword must be a non-empty string\");\n    }\n    await this.setMasterPassword(newMasterPassword);\n  }\n\n  lock(): void {\n    // No-op\n  }\n\n  async rotateKeys(): Promise<void> {\n    this.context.requireConfig();\n    const deviceKek = await this.context.deviceKeyProvider.getKey(this.context.idbConfig);\n\n    await this.context.unwrapDekWithKek(deviceKek, false, this.context.versionManager.getAadFor(\"wrap\", this.context.config!));\n    const plain = await this.context.decryptCurrentData();\n\n    const newDek = await this.context.enc.createDek();\n\n    const newDeviceKek = await this.context.deviceKeyProvider.rotateKey(this.context.idbConfig);\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n    const wrapAad = this.context.versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const { ivWrap, wrappedKey } = await this.context.enc.wrapDek(newDek, newDeviceKek, wrapAad);\n\n    const dataAad = this.context.versionManager.buildDataAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, ivWrap, wrappedKey);\n    const { iv, ciphertext } = await this.context.enc.encryptData(newDek, plain, dataAad);\n\n    this.context.config = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: \"\",\n        rounds: 1,\n        iv: ivWrap,\n        wrappedKey,\n        ctx\n      },\n      data: { iv, ciphertext }\n    };\n\n    this.context.dek = await this.context.enc.unwrapDek(ivWrap, wrappedKey, newDeviceKek, false, wrapAad);\n    for (const k of Object.keys(plain)) (plain as Record<string, unknown>)[k] = null;\n    this.context.persist();\n  }\n\n  async getData<T extends Record<string, unknown>>(): Promise<SecureDataView<T>> {\n    this.context.requireConfig();\n    await this.context.ensureDekLoaded();\n    if (!this.context.config!.data.iv || !this.context.config!.data.ciphertext) {\n      return makeSecureDataView({} as T);\n    }\n\n    const dataAad = this.context.versionManager.getAadFor(\"data\", this.context.config);\n    const obj = await this.context.enc.decryptData<unknown>(this.context.dek!, this.context.config!.data.iv, this.context.config!.data.ciphertext, dataAad);\n\n    const isPlain =\n      !!obj &&\n      typeof obj === \"object\" &&\n      !Array.isArray(obj) &&\n      Object.getPrototypeOf(obj as object) === Object.prototype;\n\n    if (!isPlain) {\n      throw new ValidationError(\"Stored data must be a plain object\");\n    }\n    return makeSecureDataView(obj as T);\n  }\n\n  async setData<T extends Record<string, unknown>>(value: T): Promise<void> {\n    this.context.requireConfig();\n    await this.context.ensureDekLoaded();\n\n    if (!value || typeof value !== \"object\" || Array.isArray(value)) {\n      throw new ValidationError(\"Data must be a plain object\");\n    }\n\n    const plain = toPlainJson(value);\n    const dataAad = this.context.versionManager.getAadFor(\"data\", this.context.config);\n    const { iv, ciphertext } = await this.context.enc.encryptData(this.context.dek!, plain, dataAad);\n    this.context.config!.data = { iv, ciphertext };\n    this.context.persist();\n  }\n\n  async exportData(customExportPassword?: string): Promise<string> {\n    if (!customExportPassword || !customExportPassword.trim()) {\n      throw new ExportError(\"Export password required in device mode\");\n    }\n    \n    this.context.requireConfig();\n    await this.context.ensureDekLoaded();\n\n    const plain = await this.context.decryptCurrentData();\n\n    // Make DEK extractable for wrapping\n    const deviceKek = await this.context.deviceKeyProvider.getKey(this.context.idbConfig);\n    await this.context.unwrapDekWithKek(\n      deviceKek,\n      true,\n      this.context.versionManager.getAadFor(\"wrap\", this.context.config)\n    );\n    const saltB64 = this.context.enc.generateSaltB64();\n    const rounds = SLS_CONSTANTS.ARGON2.ITERATIONS;\n    const kek = await this.context.deriveKekFromPassword(\n      customExportPassword,\n      base64ToBytes(saltB64),\n      rounds\n    );\n\n    const spec: ExportSpec = { dek: this.context.dek!, kek, saltB64, rounds, mPw: false };\n    return Portability.buildExportBundle(this.context.enc, this.context.versionManager, spec, plain);\n  }\n\n  importData(serialized: string, password?: string): Promise<string> {\n    throw new Error(\"Method not implemented.\");\n  }\n  clear(): Promise<void> {\n    return (async () => {\n      this.context.session.clear();\n      this.context.dek = null;\n      this.context.store.clear();\n      await this.context.deviceKeyProvider.deletePersistent(this.context.idbConfig);\n      await new InitialState(this.context).initialize(true);\n    })();\n  }\n  initialize(forceFresh?: boolean): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n}",
    "import { State } from \"./BaseState\";\nimport { DeviceModeState } from \"./DeviceModeState\";\nimport { LockedState } from \"./LockedState\";\nimport { InitialState } from \"./InitialState\";\nimport { ExportError, ModeError, ValidationError } from \"../../errors\";\nimport { SLS_CONSTANTS } from \"../../constants\";\nimport { base64ToBytes } from \"../../utils/base64\";\nimport { toPlainJson } from \"../../utils/json\";\nimport { makeSecureDataView, SecureDataView } from \"../../utils/secureDataView\";\nimport type { PersistedConfigV3 } from \"../../types\";\nimport { ExportSpec, Portability } from \"../sls/Portability\";\n\nexport class MasterPasswordState extends State {\n  isUsingMasterPassword(): boolean {\n    return true;\n  }\n\n  isLocked(): boolean {\n    return false;\n  }\n\n  async unlock(masterPassword: string): Promise<void> {\n    // No-op, already unlocked\n  }\n\n  async setMasterPassword(masterPassword: string): Promise<void> {\n    throw new ModeError(\"Master password already set; use rotateMasterPassword()\");\n  }\n\n  async removeMasterPassword(): Promise<void> {\n    this.context.requireConfig();\n    this.context.requireUnlocked();\n\n    await this.context.unwrapDekWithKek(this.context.sessionKekOrThrow(), true, this.context.versionManager.getAadFor(\"wrap\", this.context.config!));\n\n    const plain = await this.context.decryptCurrentData();\n\n    const deviceKek = await this.context.deviceKeyProvider.getKey(this.context.idbConfig);\n\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n    const wrapAad = this.context.versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const { ivWrap, wrappedKey } = await this.context.enc.wrapDek(this.context.dek!, deviceKek, wrapAad);\n\n    const dataAad = this.context.versionManager.buildDataAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, ivWrap, wrappedKey);\n    const { iv, ciphertext } = await this.context.enc.encryptData(this.context.dek!, plain, dataAad);\n\n    this.context.config = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: \"\",\n        rounds: 1,\n        iv: ivWrap,\n        wrappedKey,\n        ctx\n      },\n      data: { iv, ciphertext }\n    };\n\n    this.context.dek = await this.context.enc.unwrapDek(ivWrap, wrappedKey, deviceKek, false, wrapAad);\n    this.context.session.clear();\n    this.context.persist();\n    this.transitionTo(new DeviceModeState(this.context));\n  }\n  async rotateMasterPassword(oldMasterPassword: string, newMasterPassword: string): Promise<void> {\n    this.context.requireConfig();\n\n    const newPw = typeof newMasterPassword === \"string\" ? newMasterPassword.trim() : \"\";\n    if (newPw.length === 0) {\n      throw new ValidationError(\"newMasterPassword must be a non-empty string\");\n    }\n\n    // Explicitly verify the old password against the current header using AAD.\n    const { salt, rounds, iv, wrappedKey } = this.context.config!.header as any;\n    try {\n      const verifyKek = await this.context.deriveKekFromPassword(\n        oldMasterPassword,\n        base64ToBytes(salt),\n        rounds\n      );\n      const wrapAad = this.context.versionManager.getAadFor(\"wrap\", this.context.config!);\n      await this.context.enc.unwrapDek(iv, wrappedKey, verifyKek, false, wrapAad);\n    } catch {\n      throw new ValidationError(\"Invalid master password\");\n    }\n\n    // Proceed with rotation using the currently unlocked session KEK/DEK.\n    await this.context.unwrapDekWithKek(\n      this.context.sessionKekOrThrow(),\n      true,\n      this.context.versionManager.getAadFor(\"wrap\", this.context.config!)\n    );\n    const plain = await this.context.decryptCurrentData();\n\n    const saltB64 = this.context.enc.generateSaltB64();\n    const newRounds = SLS_CONSTANTS.ARGON2.ITERATIONS;\n    const newKek = await this.context.deriveKekFromPassword(\n      newMasterPassword,\n      base64ToBytes(saltB64),\n      newRounds\n    );\n\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n    const wrapAad = this.context.versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const { ivWrap, wrappedKey: newWrappedKey } = await this.context.enc.wrapDek(this.context.dek!, newKek, wrapAad);\n\n    const dataAad = this.context.versionManager.buildDataAad(\n      ctx,\n      SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n      ivWrap,\n      newWrappedKey\n    );\n    const { iv: dataIv, ciphertext } = await this.context.enc.encryptData(this.context.dek!, plain, dataAad);\n\n    this.context.config = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: saltB64,\n        rounds: newRounds,\n        iv: ivWrap,\n        wrappedKey: newWrappedKey,\n        ctx\n      },\n      data: { iv: dataIv, ciphertext }\n    };\n\n    this.context.session.set(newKek, saltB64, newRounds);\n    this.context.dek = await this.context.enc.unwrapDek(ivWrap, newWrappedKey, newKek, false, wrapAad);\n\n    this.context.persist();\n  }\n\n  lock(): void {\n    this.context.session.clear();\n    this.context.dek = null;\n    this.transitionTo(new LockedState(this.context));\n  }\n\n  async rotateKeys(): Promise<void> {\n    throw new ModeError(\"rotateKeys is allowed only in password-less mode\");\n  }\n\n  async getData<T extends Record<string, unknown>>(): Promise<SecureDataView<T>> {\n    this.context.requireConfig();\n    this.context.requireUnlocked();\n    if (!this.context.config!.data.iv || !this.context.config!.data.ciphertext) {\n      return makeSecureDataView({} as T);\n    }\n\n    const dataAad = this.context.versionManager.getAadFor(\"data\", this.context.config);\n    const obj = await this.context.enc.decryptData<unknown>(this.context.dek!, this.context.config!.data.iv, this.context.config!.data.ciphertext, dataAad);\n\n    const isPlain =\n      !!obj &&\n      typeof obj === \"object\" &&\n      !Array.isArray(obj) &&\n      Object.getPrototypeOf(obj as object) === Object.prototype;\n\n    if (!isPlain) {\n      throw new ValidationError(\"Stored data must be a plain object\");\n    }\n    return makeSecureDataView(obj as T);\n  }\n\n  async setData<T extends Record<string, unknown>>(value: T): Promise<void> {\n    this.context.requireConfig();\n    this.context.requireUnlocked();\n\n    if (!value || typeof value !== \"object\" || Array.isArray(value)) {\n      throw new ValidationError(\"Data must be a plain object\");\n    }\n\n    const plain = toPlainJson(value);\n    const dataAad = this.context.versionManager.getAadFor(\"data\", this.context.config);\n    const { iv, ciphertext } = await this.context.enc.encryptData(this.context.dek!, plain, dataAad);\n    this.context.config!.data = { iv, ciphertext };\n    this.context.persist();\n  }\n\n  async exportData(customExportPassword?: string): Promise<string> {\n    this.context.requireConfig();\n    await this.context.ensureDekLoaded();\n\n    const plain = await this.context.decryptCurrentData();\n\n    // Make DEK extractable for wrapping\n    const sessionKek = this.context.sessionKekOrThrow();\n    await this.context.unwrapDekWithKek(\n      sessionKek,\n      true,\n      this.context.versionManager.getAadFor(\"wrap\", this.context.config)\n    );\n\n    let spec: ExportSpec;\n    if (!customExportPassword) {\n      // Use existing session KEK + original salt/rounds, mPw:true\n      spec = {\n        dek: this.context.dek!,\n        kek: sessionKek,\n        saltB64: (this.context.config!.header as any).salt,\n        rounds: (this.context.config!.header as any).rounds,\n        mPw: true\n      };\n    } else {\n      if (!customExportPassword.trim()) throw new ExportError(\"Export password must be a non-empty string\");\n      const saltB64 = this.context.enc.generateSaltB64();\n      const rounds = SLS_CONSTANTS.ARGON2.ITERATIONS;\n      const kek = await this.context.deriveKekFromPassword(\n        customExportPassword,\n        base64ToBytes(saltB64),\n        rounds\n      );\n      spec = { dek: this.context.dek!, kek, saltB64, rounds, mPw: false };\n    }\n\n    return Portability.buildExportBundle(this.context.enc, this.context.versionManager, spec, plain);\n  }\n  importData(serialized: string, password?: string): Promise<string> {\n    throw new Error(\"Method not implemented.\");\n  }\n  clear(): Promise<void> {\n    return (async () => {\n      this.context.session.clear();\n      this.context.dek = null;\n      this.context.store.clear();\n      await this.context.deviceKeyProvider.deletePersistent(this.context.idbConfig);\n      await new InitialState(this.context).initialize(true);\n    })();\n  }\n  initialize(forceFresh?: boolean): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n}",
    "import { State } from \"./BaseState\";\nimport { MasterPasswordState } from \"./MasterPasswordState\";\nimport { InitialState } from \"./InitialState\";\nimport { ValidationError, LockedError } from \"../../errors\";\nimport { base64ToBytes } from \"../../utils/base64\";\n\nexport class LockedState extends State {\n  isUsingMasterPassword(): boolean {\n    return true;\n  }\n\n  isLocked(): boolean {\n    return true;\n  }\n\n  async unlock(masterPassword: string): Promise<void> {\n    if (!this.context.config) return;\n\n    if (typeof masterPassword !== \"string\" || masterPassword.trim().length === 0) {\n      throw new ValidationError(\"masterPassword must be a non-empty string\");\n    }\n\n    const { salt, rounds } = this.context.config.header;\n    const kek = await this.context.deriveKekFromPassword(masterPassword, base64ToBytes(salt), rounds);\n\n    try {\n      this.context.session.set(kek, salt, rounds);\n      await this.context.unwrapDekWithKek(kek, false, this.context.versionManager.getAadFor(\"wrap\", this.context.config));\n    } catch {\n      this.context.session.clear();\n      throw new ValidationError(\"Invalid master password\");\n    }\n\n    if (this.context.versionManager.isV2(this.context.config)) {\n      await this.context.migrateV2ToV3(\"master\", this.context.config, kek);\n    }\n    this.transitionTo(new MasterPasswordState(this.context));\n  }\n\n  async setMasterPassword(masterPassword: string): Promise<void> {\n    throw new LockedError();\n  }\n\n  async removeMasterPassword(): Promise<void> {\n    throw new LockedError();\n  }\n\n  async rotateMasterPassword(oldMasterPassword: string, newMasterPassword: string): Promise<void> {\n    await this.unlock(oldMasterPassword);\n    // The state will be changed to MasterPasswordState, so we can call rotateMasterPassword on it\n    await this.context.rotateMasterPassword(oldMasterPassword, newMasterPassword);\n  }\n\n  lock(): void {\n    // No-op\n  }\n\n  async rotateKeys(): Promise<void> {\n    throw new LockedError();\n  }\n\n  async getData<T extends Record<string, unknown>>(): Promise<any> {\n    throw new LockedError();\n  }\n\n  async setData<T extends Record<string, unknown>>(value: T): Promise<void> {\n    throw new LockedError();\n  }\n\n  exportData(customExportPassword?: string): Promise<string> {\n    throw new Error(\"Method not implemented.\");\n  }\n  importData(serialized: string, password?: string): Promise<string> {\n    throw new Error(\"Method not implemented.\");\n  }\n  clear(): Promise<void> {\n    return (async () => {\n      this.context.session.clear();\n      this.context.dek = null;\n      this.context.store.clear();\n      await this.context.deviceKeyProvider.deletePersistent(this.context.idbConfig);\n      await new InitialState(this.context).initialize(true);\n    })();\n  }\n  initialize(forceFresh?: boolean): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n}",
    "import {\n    PersistedConfig,\n    PersistedConfigV2,\n    PersistedConfigV3\n  } from \"../../types\";\n  import { SLS_CONSTANTS } from \"../../constants\";\n  import { base64ToBytes } from \"../../utils/base64\";\n  import { IdbConfig } from \"../../crypto/DeviceKeyProvider\";\n  import { EncryptionManager } from \"../../crypto/EncryptionManager\";\n  import { deriveKekFromPassword } from \"../../crypto/KeyDerivation\";\n\n  export class VersionManager {\n    constructor(\n      public readonly storageKey: string,\n      public readonly idbConfig: IdbConfig,\n      private readonly enc: EncryptionManager\n    ) {}\n\n    public getAadFor(\n      type: \"wrap\" | \"data\",\n      config: PersistedConfig | null\n    ): Uint8Array | undefined {\n      if (config && this.isV3(config)) {\n        const ctx = config.header.ctx ?? \"store\";\n        if (type === \"wrap\") {\n          return this.buildWrapAad(ctx, config.header.v);\n        }\n        return this.buildDataAad(\n          ctx,\n          config.header.v,\n          config.header.iv,\n          config.header.wrappedKey\n        );\n      }\n      return undefined;\n    }\n\n    public isV3(config: PersistedConfig): config is PersistedConfigV3 {\n      return (config.header as any).v === 3;\n    }\n\n    public isV2(config: PersistedConfig): config is PersistedConfigV2 {\n      return (config.header as any).v === 2;\n    }\n\n    public isValidConfig(config: PersistedConfig | null): config is PersistedConfig {\n      if (!config) return false;\n      const h = config.header as any;\n      const d = config.data as any;\n\n      if (!SLS_CONSTANTS.SUPPORTED_VERSIONS.includes(h.v)) return false;\n      if (typeof h.rounds !== \"number\" || h.rounds < 1) return false;\n      if (typeof h.iv !== \"string\" || typeof h.wrappedKey !== \"string\")\n        return false;\n      if (!d || typeof d.iv !== \"string\" || typeof d.ciphertext !== \"string\")\n        return false;\n\n      if (h.rounds === 1) {\n        if (h.salt !== \"\") return false;\n      } else {\n        if (typeof h.salt !== \"string\" || h.salt.length === 0) return false;\n      }\n\n      if (h.v === 3 && h.ctx && h.ctx !== \"store\") return false;\n\n      try {\n        base64ToBytes(h.iv);\n        base64ToBytes(h.wrappedKey);\n        if (d.iv) base64ToBytes(d.iv);\n        if (d.ciphertext) base64ToBytes(d.ciphertext);\n      } catch {\n        return false;\n      }\n      return true;\n    }\n\n    public buildWrapAad(\n      ctx: \"store\" | \"export\",\n      version: number\n    ): Uint8Array {\n      const root = ctx === \"store\" ? this.storageKey : \"export\";\n      const s = `sls|wrap|v${version}|${root}`;\n      return new TextEncoder().encode(s);\n    }\n\n    public buildDataAad(\n      ctx: \"store\" | \"export\",\n      version: number,\n      ivWrap: string,\n      wrappedKey: string\n    ): Uint8Array {\n      const root = ctx === \"store\" ? this.storageKey : \"export\";\n      const s = `sls|data|v${version}|${root}|${ivWrap}|${wrappedKey}`;\n      return new TextEncoder().encode(s);\n    }\n  }",
    "import { EncryptionManager } from \"../crypto/EncryptionManager\";\nimport { DeviceKeyProvider } from \"../crypto/DeviceKeyProvider\";\nimport { deriveKekFromPassword } from \"../crypto/KeyDerivation\";\nimport { SessionKeyCache } from \"../crypto/SessionKeyCache\";\nimport { SLS_CONSTANTS } from \"../constants\";\nimport { StorageService } from \"../storage/StorageService\";\nimport type { PersistedConfig, PersistedConfigV2, PersistedConfigV3 } from \"../types\";\nimport { base64ToBytes } from \"../utils/base64\";\nimport {  SecureDataView } from \"../utils/secureDataView\";\nimport { LockedState } from \"./states/LockedState\";\nimport { DeviceModeState } from \"./states/DeviceModeState\";\nimport type { IdbConfig } from \"../crypto/DeviceKeyProvider\";\nimport {\n  ImportError,\n  LockedError,\n} from \"../errors\";\nimport { VersionManager } from \"./sls/VersionManager\";\nimport { State } from \"./states/BaseState\";\nimport { InitialState } from \"./states/InitialState\";\nimport { Portability } from \"./sls/Portability\";\n\nexport interface SecureLocalStorageOptions {\n  storageKey?: string;\n  idbConfig?: Partial<IdbConfig>;\n}\n\nexport class SecureLocalStorage {\n  private state: State;\n  public readonly store: StorageService;\n  public readonly enc = new EncryptionManager();\n  public readonly session = new SessionKeyCache();\n  public config: PersistedConfig | null = null;\n  public dek: CryptoKey | null = null;\n  private ready: Promise<void>;\n  public readonly idbConfig: { dbName: string; storeName: string; keyId: string };\n  public readonly storageKeyStr: string;\n  public readonly versionManager: VersionManager;\n  public lastResetReason: \"invalid-config\" | \"device-kek-mismatch\" | null = null;\n  public readonly DATA_VERSION: number = SLS_CONSTANTS.CURRENT_DATA_VERSION;\n  public readonly deviceKeyProvider = DeviceKeyProvider;\n  public readonly deriveKekFromPassword = deriveKekFromPassword;\n\n  constructor(opts?: SecureLocalStorageOptions) {\n    this.storageKeyStr = opts?.storageKey ?? SLS_CONSTANTS.STORAGE_KEY;\n    this.store = new StorageService(this.storageKeyStr);\n    this.idbConfig = {\n      dbName: opts?.idbConfig?.dbName ?? SLS_CONSTANTS.IDB.DB_NAME,\n      storeName: opts?.idbConfig?.storeName ?? SLS_CONSTANTS.IDB.STORE,\n      keyId: opts?.idbConfig?.keyId ?? SLS_CONSTANTS.IDB.ID,\n    };\n    this.versionManager = new VersionManager(this.storageKeyStr, this.idbConfig, this.enc);\n    this.state = new InitialState(this);\n    this.ready = this.state.initialize();\n  }\n\n  public transitionTo(state: State): void {\n    this.state = state;\n  }\n\n  public isUsingMasterPassword(): boolean {\n    return this.state.isUsingMasterPassword();\n  }\n\n  public isLocked(): boolean {\n    return this.state.isLocked();\n  }\n\n  public async unlock(masterPassword: string): Promise<void> {\n    await this.ready;\n    return this.state.unlock(masterPassword);\n  }\n\n  public async setMasterPassword(masterPassword: string): Promise<void> {\n    await this.ready;\n    return this.state.setMasterPassword(masterPassword);\n  }\n\n  public async removeMasterPassword(): Promise<void> {\n    await this.ready;\n    return this.state.removeMasterPassword();\n  }\n\n  public async rotateMasterPassword(oldMasterPassword: string, newMasterPassword: string): Promise<void> {\n    await this.ready;\n    return this.state.rotateMasterPassword(oldMasterPassword, newMasterPassword);\n  }\n\n  public lock(): void {\n    this.state.lock();\n  }\n\n  public async rotateKeys(): Promise<void> {\n    await this.ready;\n    return this.state.rotateKeys();\n  }\n\n  public async getData<T extends Record<string, unknown> = Record<string, unknown>>(): Promise<SecureDataView<T>> {\n    await this.ready;\n    return this.state.getData();\n  }\n\n  public async setData<T extends Record<string, unknown>>(value: T): Promise<void> {\n    await this.ready;\n    return this.state.setData(value);\n  }\n\n  public async exportData(customExportPassword?: string): Promise<string> {\n    await this.ready;\n    return this.state.exportData(customExportPassword);\n  }\n\n  public async importData(serialized: string, password?: string): Promise<string> {\n    await this.ready;\n    let t: unknown;\n \n    const { bundle, isMasterProtected } = Portability.parseAndClassify(serialized, SLS_CONSTANTS.SUPPORTED_VERSIONS);   \n\n    this.validateBundle(bundle);\n\n    if (typeof password !== \"string\" || password.length === 0) {\n      throw new ImportError(isMasterProtected\n        ? \"Master password required to import\"\n        : \"Export password required to import\"\n      );\n    }\n\n    const ctx = this.versionManager.isV3(bundle) ? (bundle.header.ctx ?? \"store\") : undefined;\n    const wrapAad = this.versionManager.isV3(bundle) ? this.versionManager.buildWrapAad(ctx!, bundle.header.v) : undefined;\n    const dataAadBuilder = (iv: string, wk: string) =>\n      this.versionManager.isV3(bundle) ? this.versionManager.buildDataAad(ctx!, bundle.header.v, iv, wk) : undefined;\n\n    if (isMasterProtected) {\n      try {\n        const kek = await deriveKekFromPassword(password, base64ToBytes(bundle.header.salt), (bundle.header as any).rounds);\n        const dek = await this.enc.unwrapDek(bundle.header.iv, bundle.header.wrappedKey, kek, false, wrapAad);\n        if (bundle.data.iv && bundle.data.ciphertext) {\n          const dataAad = dataAadBuilder(bundle.header.iv, bundle.header.wrappedKey);\n          await this.enc.decryptData<Record<string, unknown>>(dek, bundle.data.iv, bundle.data.ciphertext, dataAad);\n        }\n      } catch {\n        throw new ImportError(\"Invalid master password or corrupted export data\");\n      }\n      if (!this.versionManager.isV3(bundle) || (this.versionManager.isV3(bundle) && bundle.header.ctx !== \"store\")) {\n        const kek = await deriveKekFromPassword(password, base64ToBytes(bundle.header.salt), (bundle.header as any).rounds);\n        const dek = await this.enc.unwrapDek(bundle.header.iv, bundle.header.wrappedKey, kek, true, wrapAad);\n        const ctxStore: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n        const wrapAadStore = this.versionManager.buildWrapAad(ctxStore, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n        const wrapped = await this.enc.wrapDek(dek, kek, wrapAadStore);\n        const dataAadStore = this.versionManager.buildDataAad(ctxStore, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, wrapped.ivWrap, wrapped.wrappedKey);\n        const plain = bundle.data.iv && bundle.data.ciphertext\n          ? await this.enc.decryptData<Record<string, unknown>>(dek, bundle.data.iv, bundle.data.ciphertext, dataAadBuilder(bundle.header.iv, bundle.header.wrappedKey))\n          : {};\n        const data = await this.enc.encryptData(dek, plain, dataAadStore);\n\n        this.config = {\n          header: {\n            v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n            salt: bundle.header.salt,\n            rounds: (bundle.header as any).rounds,\n            iv: wrapped.ivWrap,\n            wrappedKey: wrapped.wrappedKey,\n            ctx: ctxStore,\n            mPw: true\n          },\n          data\n        };\n      } else {\n        this.config = bundle as PersistedConfigV3;\n      }\n\n      this.dek = null;\n      this.session.clear();\n      this.persist();\n      this.transitionTo(new LockedState(this));\n      return \"masterPassword\";\n    }\n\n    try {\n      const exportKek = await deriveKekFromPassword(password, base64ToBytes(bundle.header.salt), (bundle.header as any).rounds);\n      const extractableDek = await this.enc.unwrapDek(bundle.header.iv, bundle.header.wrappedKey, exportKek, true, wrapAad);\n\n      const deviceKek = await DeviceKeyProvider.getKey(this.idbConfig);\n\n      const ctxStore: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n      const wrapAadStore = this.versionManager.buildWrapAad(ctxStore, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n      const { ivWrap, wrappedKey } = await this.enc.wrapDek(extractableDek, deviceKek, wrapAadStore);\n      const dataAadStore = this.versionManager.buildDataAad(ctxStore, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, ivWrap, wrappedKey);\n\n      const plain = bundle.data.iv && bundle.data.ciphertext\n        ? await this.enc.decryptData<Record<string, unknown>>(extractableDek, bundle.data.iv, bundle.data.ciphertext, dataAadBuilder(bundle.header.iv, bundle.header.wrappedKey))\n        : {};\n      const data = await this.enc.encryptData(extractableDek, plain, dataAadStore);\n\n      this.config = {\n        header: {\n          v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n          salt: \"\",\n          rounds: 1,\n          iv: ivWrap,\n          wrappedKey,\n          ctx: ctxStore\n        },\n        data\n      };\n      this.dek = await this.enc.unwrapDek(ivWrap, wrappedKey, deviceKek, false, wrapAadStore);\n      this.session.clear();\n      this.persist();\n      this.transitionTo(new DeviceModeState(this));\n      return \"customExportPassword\";\n    } catch {\n      throw new ImportError(\"Invalid export password or corrupted export data\");\n    }\n  }\n\n  public async clear(): Promise<void> {\n    await this.ready;\n    return this.state.clear();\n  }\n\n  public persist(): void {\n    this.store.set(this.config!);\n  }\n\n  public requireConfig(): void {\n    if (!this.config) throw new ImportError(\"No configuration present\");\n  }\n\n  public requireUnlocked(): void {\n    if (!this.dek) throw new LockedError();\n  }\n\n  public sessionKekOrThrow(): CryptoKey {\n    const { salt, rounds } = this.config!.header as any;\n    const kek = this.session.match(salt, rounds);\n    if (!kek) throw new LockedError(\"Session locked.\");\n    return kek;\n  }\n\n  public async ensureDekLoaded(): Promise<void> {\n    if (this.dek) return;\n    if (this.isUsingMasterPassword()) {\n      const kek = this.sessionKekOrThrow();\n      await this.unwrapDekWithKek(kek, false, this.versionManager.getAadFor(\"wrap\", this.config!));\n    } else {\n      const deviceKek = await DeviceKeyProvider.getKey(this.idbConfig);\n      await this.unwrapDekWithKek(deviceKek, false, this.versionManager.getAadFor(\"wrap\", this.config!));\n    }\n  }\n\n  public async unwrapDekWithKek(kek: CryptoKey, forWrapping: boolean, aad?: Uint8Array): Promise<void> {\n    this.dek = await this.enc.unwrapDek(this.config!.header.iv, this.config!.header.wrappedKey, kek, forWrapping, aad);\n  }\n\n  public validateBundle(bundle: PersistedConfig): void {\n    const h = bundle?.header as any;\n    const d = bundle?.data as any;\n    if (!h || !d) throw new ImportError(\"Invalid export structure\");\n\n    if (!Number.isInteger(h.rounds) || h.rounds < 1) throw new ImportError(\"Invalid header.rounds\");\n\n    if (h.rounds === 1) {\n      if (h.salt !== \"\") throw new ImportError(\"Device-mode bundles must have empty salt\");\n    } else {\n      if (typeof h.salt !== \"string\" || h.salt.length === 0) {\n        throw new ImportError(\"Password-protected bundles must include non-empty salt\");\n      }\n    }\n\n    if (\"mPw\" in h && typeof h.mPw !== \"boolean\") {\n      throw new ImportError(\"Invalid header.mPw\");\n    }\n    if (\"ctx\" in h && !(h.ctx === \"store\" || h.ctx === \"export\")) {\n      throw new ImportError(\"Invalid header.ctx\");\n    }\n\n    if (typeof h.iv !== \"string\" || h.iv.length === 0) throw new ImportError(\"Invalid header.iv\");\n    if (typeof h.wrappedKey !== \"string\" || h.wrappedKey.length === 0) throw new ImportError(\"Invalid header.wrappedKey\");\n    if (typeof d.iv !== \"string\" || typeof d.ciphertext !== \"string\") {\n      throw new ImportError(\"Invalid data section\");\n    }\n\n    try {\n      base64ToBytes(h.iv);\n      base64ToBytes(h.wrappedKey);\n      if (d.iv) base64ToBytes(d.iv);\n      if (d.ciphertext) base64ToBytes(d.ciphertext);\n    } catch {\n      throw new ImportError(\"Invalid base64 data\");\n    }\n  }\n\n  public async decryptCurrentData(): Promise<Record<string, unknown>> {\n    if (!this.config!.data.iv || !this.config!.data.ciphertext) return {};\n    const aad = this.versionManager.getAadFor(\"data\", this.config);\n    return await this.enc.decryptData<Record<string, unknown>>(\n      this.dek!, this.config!.data.iv, this.config!.data.ciphertext, aad\n    );\n  }\n\n  public async migrateV2ToV3(\n    mode: \"device\" | \"master\",\n    v2: PersistedConfigV2,\n    kek: CryptoKey\n  ): Promise<void> {\n    const dek = await this.enc.unwrapDek(v2.header.iv, v2.header.wrappedKey, kek, true, undefined);\n    const plain = v2.data.iv && v2.data.ciphertext\n      ? await this.enc.decryptData<Record<string, unknown>>(dek, v2.data.iv, v2.data.ciphertext, undefined)\n      : {};\n\n    const ctx: PersistedConfigV3[\"header\"][\"ctx\"] = \"store\";\n    const wrapAad = this.versionManager.buildWrapAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION);\n    const { ivWrap, wrappedKey } = await this.enc.wrapDek(dek, kek, wrapAad);\n\n    const dataAad = this.versionManager.buildDataAad(ctx, SLS_CONSTANTS.MIGRATION_TARGET_VERSION, ivWrap, wrappedKey);\n    const { iv, ciphertext } = await this.enc.encryptData(dek, plain, dataAad);\n\n    this.config = {\n      header: {\n        v: SLS_CONSTANTS.MIGRATION_TARGET_VERSION,\n        salt: mode === \"device\" ? \"\" : v2.header.salt,\n        rounds: mode === \"device\" ? 1 : v2.header.rounds,\n        iv: ivWrap,\n        wrappedKey,\n        ctx\n      },\n      data: { iv, ciphertext }\n    };\n\n    if (mode === \"device\") {\n      const deviceKek = kek;\n      this.dek = await this.enc.unwrapDek(ivWrap, wrappedKey, deviceKek, false, wrapAad);\n      this.session.clear();\n    } else {\n      const masterKek = kek;\n      this.dek = await this.enc.unwrapDek(ivWrap, wrappedKey, masterKek, false, wrapAad);\n    }\n\n    this.persist();\n  }\n}",
    "import { SecureLocalStorage, type SecureLocalStorageOptions } from \"./api/SecureLocalStorageStates\";\n\nexport type { SecureLocalStorageOptions } from \"./api/SecureLocalStorageStates\";\nexport { SecureLocalStorage } from \"./api/SecureLocalStorageStates\";\n\n/**\n * Creates and initializes a new `SecureLocalStorage` instance.\n *\n * This factory function is the recommended way to get started with the library.\n * It provides a convenient shorthand for `new SecureLocalStorage(opts)`.\n *\n * @param {SecureLocalStorageOptions} [opts] - Optional configuration to customize storage keys and other behavior.\n * @returns {SecureLocalStorage} A new instance of the `SecureLocalStorage` class.\n * @example\n * ```typescript\n * import secureLocalStorage from 'secure-local-storage';\n *\n * // Initialize with default options\n * const sls = secureLocalStorage();\n *\n * async function main() {\n *   await sls.setData({ secret: 'This is a secret' });\n *   const data = await sls.getData();\n *   console.log(data.value.secret); // \"This is a secret\"\n *   data.clear(); // clears read data memory\n * }\n *\n * main();\n * ```\n */\nexport default function secureLocalStorage(opts?: SecureLocalStorageOptions): SecureLocalStorage {\n  return new SecureLocalStorage(opts);\n}"
  ],
  "mappings": "0jDAAA,SAAS,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,OAAO,SAAS,MAAU,UAAU,mCAAmC,KAAK,UAAU,IAAI,CAAC,EAAE,SAAS,oBAAoB,CAAC,KAAK,eAAe,CAAC,IAAI,IAAI,GAAG,kBAAkB,EAAE,UAAU,GAAG,KAAK,EAAE,KAAK,QAAQ,EAAE,EAAE,GAAG,KAAK,OAAO,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,OAAO,KAAK,KAAK,WAAW,CAAC,EAAO,QAAG,OAAO,GAAG,MAAW,UAAK,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,YAAY,EAAE,GAAG,OAAO,GAAQ,QAAG,YAAY,EAAE,GAAG,OAAO,EAAE,CAAC,GAAG,IAAI,OAAO,GAAG,oBAAoB,GAAG,IAAI,WAAW,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,WAAW,IAAI,OAAO,CAAC,IAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC,IAAI,eAAe,IAAI,YAAY,GAAG,EAAE,GAAG,iBAAiB,IAAI,OAAO,EAAE,CAAC,GAAG,iBAAiB,GAAG,IAAI,GAAG,kBAAkB,EAAO,SAAI,IAAI,MAAM,EAAE,cAAc,EAAE,kBAAkB,IAAI,OAAO,EAAE,IAAI,YAAY,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,UAAe,QAAG,IAAI,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC,IAAI,GAAG,kBAAkB,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,GAAG,eAAe,CAAC,GAAG,IAAI,OAAO,EAAE,KAAK,MAAW,SAAI,KAAK,kBAAkB,GAAO,KAAC,GAAG,IAAI,OAAO,EAAE,KAAK,IAAI,KAAK,MAAM,UAAU,EAAE,CAAC,EAAO,SAAI,KAAK,MAAM,UAAU,EAAE,CAAC,EAAE,kBAAkB,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAO,QAAG,OAAO,IAAI,OAAO,GAAG,EAAE,KAAU,UAAK,GAAG,OAAO,IAAI,SAAS,OAAO,CAAC,IAAI,WAAW,CAAC,IAAI,IAAI,WAAW,KAAK,WAAW,KAAK,KAAK,WAAW,OAAO,WAAW,MAAM,KAAK,WAAW,KAAK,IAAI,GAAG,CAAC,IAAI,OAAO,KAAK,GAAG,MAAM,WAAW,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,SAAS,OAAO,EAAE,CAAC,IAAI,aAAa,GAAG,iBAAiB,GAAG,IAAI,QAAQ,EAAE,UAAU,OAAO,EAAE,GAAG,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,KAAK,GAAG,GAAG,EAAE,KAAK,UAAU,GAAO,KAAC,GAAG,MAAW,OAAE,IAAI,QAAQ,IAAI,EAAE,KAAK,IAAI,GAAG,WAAW,IAAI,EAAE,KAAK,SAAS,EAAE,SAAS,aAAa,KAAK,IAAI,aAAa,iBAAiB,KAAK,WAAW,CAAC,IAAI,GAAG,GAAG,aAAa,qBAAqB,aAAa,CAAC,gBAAgB,EAAE,iBAAiB,GAAG,aAAa,OAAO,EAAE,MAAM,IAAI,aAAkB,WAAM,IAAS,QAAG,aAAa,OAAO,EAAE,OAAO,aAAkB,WAAM,IAAI,SAAS,SAAS,CAAC,KAAK,CAAC,GAAG,WAAW,IAAI,EAAE,KAAK,SAAS,EAAE,MAAM,IAAI,IAAI,WAAW,KAAK,WAAW,CAAC,IAAI,GAAG,kBAAkB,KAAK,WAAW,KAAK,OAAO,CAAC,IAAI,GAAG,GAAG,KAAK,qBAAqB,KAAK,CAAC,UAAU,EAAE,KAAK,SAAS,GAAG,CAAC,WAAW,KAAK,IAAI,GAAG,KAAK,OAAO,GAAG,kBAAkB,MAAM,IAAI,GAAG,WAAW,MAAM,IAAI,KAAK,OAAO,KAAK,SAAS,UAAU,CAAC,KAAK,CAAC,OAAO,WAAW,IAAI,EAAE,KAAK,OAAO,GAAG,KAAK,WAAW,CAAC,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC,GAAG,UAAU,SAAS,EAAE,MAAM,IAAI,IAAI,OAAO,QAAQ,EAAE,EAAE,EAAE,UAAU,OAAO,EAAE,EAAE,CAAC,IAAI,IAAI,UAAU,GAAG,GAAG,WAAW,GAAG,EAAE,IAAI,OAAO,EAAE,GAAG,SAAc,OAAE,OAAO,IAAS,aAAQ,IAAI,IAAI,GAAG,SAAc,OAAE,MAAM,IAAI,OAAO,UAAU,MAAM,EAAE,SAAS,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,WAAW,IAAI,EAAE,WAAW,EAAE,EAAE,OAAO,GAAG,MAAM,GAAG,GAAG,KAAK,QAAQ,IAAI,EAAE,GAAG,QAAQ,EAAE,EAAE,OAAO,GAAG,MAAM,GAAG,IAAI,UAAU,EAAE,KAAK,UAAU,KAAK,OAAO,EAAE,UAAU,GAAG,KAAK,WAAW,SAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,KAAK,OAAO,QAAQ,QAAQ,UAAU,QAAQ,EAAE,KAAK,QAAQ,GAAG,OAAO,EAAE,QAAQ,GAAG,GAAG,WAAW,OAAO,IAAI,GAAG,MAAM,IAAI,MAAM,GAAG,OAAO,MAAM,MAAM,QAAQ,OAAO,QAAQ,MAAM,QAAQ,MAAM,cAAc,GAAG,EAAE,EAAE,KAAK,GAAG,OAAO,EAAE,EAAE,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,MAAM,QAAQ,GAAG,GAAG,WAAW,QAAQ,CAAC,IAAI,GAAG,OAAO,GAAG,MAAM,QAAQ,EAAE,CAAC,EAAO,QAAG,IAAI,EAAE,OAAO,GAAG,MAAM,QAAQ,CAAC,EAAO,QAAG,QAAQ,QAAQ,GAAG,KAAK,WAAW,UAAU,CAAC,IAAI,GAAG,cAAc,EAAO,QAAG,IAAI,EAAE,cAAc,EAAE,MAAM,IAAI,SAAS,KAAK,WAAW,UAAU,CAAC,EAAE,OAAO,GAAG,WAAW,QAAQ,CAAC,EAAE,GAAG,WAAW,OAAO,MAAW,QAAG,WAAW,GAAG,cAAc,EAAE,IAAI,IAAI,GAAG,IAAI,EAAE,UAAU,cAAc,EAAE,GAAG,QAAQ,EAAE,EAAE,GAAG,IAAI,SAAS,KAAK,WAAW,CAAC,IAAI,GAAG,GAAG,IAAI,SAAS,EAAE,KAAK,KAAU,UAAK,MAAM,GAAG,IAAI,OAAO,EAAE,OAAO,IAAI,GAAG,MAAM,QAAQ,aAAa,EAAM,KAAC,GAAG,SAAS,cAAc,GAAG,WAAW,OAAO,IAAI,GAAG,EAAE,QAAQ,OAAO,GAAG,MAAM,OAAO,GAAG,SAAS,SAAS,CAAC,KAAK,CAAC,OAAO,KAAK,SAAS,OAAO,CAAC,KAAK,CAAC,GAAG,WAAW,IAAI,EAAE,KAAK,SAAS,EAAE,MAAM,IAAI,IAAI,KAAK,KAAK,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG,IAAI,GAAG,aAAa,GAAG,QAAQ,EAAE,KAAK,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,KAAK,KAAK,WAAW,CAAC,EAAE,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,OAAY,kBAAa,GAAG,GAAG,MAAM,GAAG,OAAO,QAAQ,IAAI,IAAI,GAAG,SAAS,MAAM,EAAE,MAAM,KAAK,OAAO,KAAK,MAAM,EAAE,GAAG,EAAE,SAAS,QAAQ,CAAC,KAAK,IAAI,CAAC,GAAG,MAAW,QAAG,OAAO,MAAM,SAAS,MAAU,UAAU,iCAAiC,EAAE,WAAW,IAAI,EAAE,IAAI,MAAM,EAAE,IAAI,GAAG,aAAa,GAAG,EAAE,GAAG,MAAW,QAAG,IAAI,OAAO,GAAG,IAAI,QAAQ,KAAK,OAAO,CAAC,GAAG,IAAI,SAAS,KAAK,QAAQ,MAAM,KAAK,MAAM,GAAG,IAAI,OAAO,IAAI,OAAO,EAAE,iBAAiB,GAAG,IAAI,EAAE,KAAK,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,WAAW,CAAC,EAAE,GAAG,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,OAAW,KAAC,GAAG,mBAAmB,GAAG,aAAa,GAAG,iBAAiB,EAAE,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,IAAI,WAAW,MAAM,GAAG,GAAG,EAAE,SAAS,GAAG,IAAI,EAAO,YAAO,GAAG,IAAI,kBAAkB,GAAG,QAAQ,IAAI,IAAI,iBAAsB,QAAG,MAAM,GAAG,IAAI,KAAK,OAAO,OAAO,KAAK,MAAM,MAAM,GAAG,EAAM,KAAC,IAAI,EAAE,KAAK,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,KAAK,WAAW,CAAC,IAAI,IAAI,GAAG,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,OAAY,QAAG,MAAM,GAAG,aAAa,GAAG,IAAI,EAAE,EAAE,GAAG,MAAM,GAAG,MAAM,GAAG,OAAO,KAAK,MAAM,MAAM,GAAG,GAAG,SAAS,OAAO,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,IAAI,SAAS,GAAG,UAAU,EAAE,IAAI,GAAG,aAAa,GAAG,YAAY,EAAE,QAAQ,EAAE,KAAK,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,WAAW,CAAC,EAAE,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,MAAM,SAAS,GAAG,MAAM,GAAG,aAAa,GAAG,IAAI,EAAE,EAAE,GAAG,OAAO,IAAI,GAAG,WAAW,GAAG,SAAS,EAAO,QAAG,cAAc,EAAE,YAAY,EAAO,QAAG,WAAW,GAAG,YAAY,GAAG,GAAG,WAAW,IAAI,MAAM,IAAI,cAAc,GAAG,cAAc,GAAG,WAAW,IAAI,GAAG,WAAW,UAAU,EAAE,MAAM,GAAG,OAAO,KAAK,MAAM,SAAS,GAAG,EAAE,SAAS,MAAM,CAAC,WAAW,CAAC,GAAG,aAAa,MAAM,OAAO,aAAa,SAAS,MAAU,UAAU,mEAAmE,OAAO,UAAU,EAAE,OAAO,QAAQ,IAAI,UAAU,EAAE,SAAS,KAAK,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,EAAE,EAAE,GAAG,KAAK,SAAS,EAAE,OAAO,IAAI,IAAI,KAAK,KAAK,WAAW,CAAC,EAAE,YAAY,OAAO,GAAG,MAAM,GAAG,YAAY,IAAI,KAAK,IAAI,MAAM,EAAO,WAAM,EAAE,IAAI,SAAS,GAAG,UAAU,EAAE,IAAI,GAAG,aAAa,GAAG,EAAE,KAAK,OAAO,EAAE,YAAY,EAAE,KAAK,GAAG,MAAM,EAAE,EAAE,CAAC,GAAG,KAAK,KAAK,WAAW,CAAC,EAAE,OAAO,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,MAAM,SAAS,GAAG,MAAM,GAAG,aAAa,GAAG,IAAI,EAAE,EAAE,GAAG,OAAO,IAAI,GAAG,WAAW,GAAG,SAAS,EAAO,QAAG,cAAc,EAAE,YAAY,EAAO,QAAG,WAAW,GAAG,YAAY,GAAG,GAAG,WAAW,IAAI,MAAM,IAAI,cAAc,GAAG,cAAc,GAAG,WAAW,IAAI,GAAG,WAAW,UAAU,GAAG,GAAG,MAAM,GAAG,GAAG,YAAY,GAAG,YAAY,IAAI,KAAK,IAAI,KAAK,KAAK,MAAM,EAAE,GAAG,EAAO,SAAI,KAAK,IAAI,KAAK,KAAK,MAAM,UAAU,GAAG,EAAM,KAAC,GAAG,YAAY,GAAG,YAAY,IAAI,KAAK,KAAK,MAAM,EAAE,QAAQ,EAAE,IAAI,KAAK,KAAK,MAAM,EAAE,GAAG,EAAO,SAAI,KAAK,KAAK,MAAM,UAAU,QAAQ,EAAE,IAAI,KAAK,KAAK,MAAM,UAAU,GAAG,EAAE,IAAI,IAAI,KAAK,MAAM,SAAS,GAAG,EAAE,GAAG,UAAU,EAAE,IAAI,IAAI,KAAK,MAAM,EAAE,UAAU,CAAC,EAAO,QAAG,YAAY,IAAI,IAAI,IAAI,OAAO,QAAQ,IAAI,IAAI,UAAU,IAAI,MAAiK,sCAAjK,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,UAAU,WAAW,KAAK,SAAS,UAAU,QAAQ,SAAS,QAAQ,OAAO,MAAM,IAAI,UAAU,MAAM,KAAK,MAAM,IAAI,CAAC,EAAM,aAAa,wKCA16N,QAAO,OAAO,KAAO,KAAa,OAAO,KAAK,OAAS,IAAY,KAAK,OAAO,CAAC,EAAM,SAAS,QAAW,gBAAgB,CAAC,EAAM,IAAI,IAAI,OAAO,QAAQ,GAAG,QAAO,eAAe,GAAG,EAAG,gBAAgB,KAAK,QAAO,KAAM,IAAI,WAAW,CAAC,EAAM,YAAY,iBAAqB,MAAM,QAAQ,CAAC,OAAO,QAAQ,CAAC,MAAM,SAAa,mBAAmB,GAAU,sBAAsB,GAAU,oBAAoB,GAAU,qBAAqB,GAAM,mBAAmB,OAAO,SAAS,SAAS,sBAAsB,OAAO,gBAAgB,WAAW,oBAAoB,OAAO,UAAU,UAAU,OAAO,QAAQ,WAAW,UAAU,OAAO,QAAQ,SAAS,OAAO,SAAS,qBAAqB,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,sBAAsB,IAAI,gBAAgB,GAAG,SAAS,UAAU,CAAC,KAAK,CAAC,GAAG,QAAO,WAAe,OAAO,QAAO,WAAc,KAAK,eAAe,EAAE,OAAO,gBAAgB,KAAK,IAAI,MAAM,UAAU,WAAW,eAAmB,OAAW,SAAS,GAAG,oBAAoB,CAAC,GAAG,sBAAuB,yDAAgC,QAAQ,eAAe,EAAE,IAAS,qBAAgB,UAAU,IAAuW,GAAnW,MAAM,SAAS,UAAU,CAAC,SAAS,OAAO,CAAC,GAAG,CAAC,OAAO,kBAAqB,GAAG,CAAC,SAAS,kDAAkE,OAAzC,SAAS,SAAS,UAAa,QAAQ,EAAS,OAAO,aAAgB,SAAS,OAAO,KAAK,MAAM,GAAG,WAAW,SAAS,UAAU,CAAC,SAAS,CAAC,IAAI,IAAI,MAAM,SAAS,EAAI,EAAE,GAAG,CAAC,IAAI,OAAQ,IAAI,IAAI,WAAW,GAAG,EAAqB,OAAnB,OAAO,IAAI,MAAM,EAAS,KAAQ,QAAQ,KAAQ,OAAO,EAAG,YAAY,QAAQ,KAAQ,GAAG,QAAQ,MAAM,GAAG,EAAsC,GAApC,WAAW,QAAQ,KAAQ,MAAM,CAAC,EAAK,OAAO,QAAS,IAAa,QAAO,QAAW,QAAO,QAAQ,GAAM,oBAAoB,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,YAAa,MAAM,GAAI,EAAE,QAAQ,GAAM,qBAAqB,KAAK,EAAE,MAAM,QAAQ,CAAC,OAAO,CAAC,QAAQ,KAAQ,MAAM,GAAG,QAAO,QAAW,QAAQ,EAAE,CAAC,MAAM,8BAAmC,QAAG,qBAAqB,CAAC,GAAG,OAAO,KAAM,IAAa,MAAM,SAAS,UAAU,CAAC,EAAE,CAAC,OAAO,KAAK,CAAC,GAAwL,GAArL,WAAW,SAAS,UAAU,CAAC,EAAE,CAAC,IAAI,KAAK,GAAG,OAAO,aAAa,WAAY,OAAO,IAAI,WAAW,WAAW,CAAC,CAAC,EAAuD,OAArD,KAAK,KAAK,EAAE,QAAQ,EAAE,OAAO,OAAO,OAAO,QAAQ,EAAS,MAAS,OAAO,WAAY,IAAa,WAAW,WAAgB,QAAG,OAAO,UAAW,IAAa,WAAW,UAAU,GAAG,OAAO,OAAO,WAAY,MAAM,QAAQ,CAAC,OAAO,CAAC,KAAK,MAAM,GAAG,GAAG,OAAO,MAAQ,IAAY,CAAC,GAAG,OAAO,QAAU,IAAY,QAAQ,CAAC,EAAE,QAAQ,IAAI,MAAM,QAAQ,KAAK,QAAQ,MAAM,OAAO,SAAW,IAAY,SAAS,OAAY,QAAG,oBAAoB,sBAAsB,CAAC,GAAG,sBAAuB,gBAAgB,KAAK,SAAS,KAAU,QAAG,OAAO,SAAW,KAAa,SAAS,cAAe,gBAAgB,SAAS,cAAc,IAAI,GAAG,gBAAgB,QAAQ,OAAO,IAAI,EAAG,gBAAgB,gBAAgB,OAAO,EAAE,gBAAgB,YAAY,GAAG,EAAE,CAAC,EAAO,qBAAgB,GAAG,CAAkH,GAAjH,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,eAAwD,OAAzC,IAAI,KAAK,MAAM,IAAI,EAAK,EAAE,IAAI,KAAK,IAAI,EAAS,IAAI,cAAiB,sBAAuB,WAAW,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,eAAuF,OAAxE,IAAI,KAAK,MAAM,IAAI,EAAK,EAAE,IAAI,aAAa,cAAc,IAAI,KAAK,IAAI,EAAS,IAAI,WAAW,IAAI,QAAQ,GAAG,UAAU,QAAQ,CAAC,IAAI,OAAO,QAAQ,CAAC,IAAI,IAAI,IAAI,eAAe,IAAI,KAAK,MAAM,IAAI,EAAI,EAAE,IAAI,aAAa,cAAc,IAAI,OAAO,QAAQ,EAAE,CAAC,GAAG,IAAI,QAAQ,KAAK,IAAI,QAAQ,GAAG,IAAI,SAAS,CAAC,OAAO,IAAI,QAAQ,EAAE,OAAO,QAAQ,GAAG,IAAI,QAAQ,QAAQ,IAAI,KAAK,IAAI,EAAE,CAAC,eAAe,QAAQ,CAAC,MAAM,CAAC,SAAS,MAAM,OAAa,IAAI,IAAI,QAAO,OAAU,QAAQ,IAAI,KAAK,OAAO,EAAM,IAAI,QAAO,UAAa,QAAQ,KAAK,KAAK,OAAO,EAAE,IAAI,OAAO,gBAAiB,GAAG,gBAAgB,eAAe,GAAG,EAAG,QAAO,KAAK,gBAAgB,KAAM,gBAAgB,KAAK,GAAG,QAAO,UAAa,WAAW,QAAO,UAAa,GAAG,QAAO,YAAe,YAAY,QAAO,YAAe,GAAG,QAAO,KAAQ,MAAM,QAAO,KAAQ,IAAI,WAAW,GAAG,QAAO,WAAc,WAAW,QAAO,WAAc,IAAI,cAAc,QAAO,eAAkB,GAAK,GAAG,OAAO,cAAc,SAAU,MAAM,iCAAiC,EAAE,IAAI,WAAe,MAAM,GAAU,WAAW,SAAS,MAAM,CAAC,UAAU,KAAK,CAAC,GAAG,CAAC,UAAW,MAAM,qBAAqB,IAAI,EAAG,IAAI,aAAa,EAAM,YAAY,EAAE,SAAS,QAAQ,CAAC,KAAK,UAAU,CAAC,IAAI,IAAI,GAAG,WAAW,YAAa,IAAI,WAAW,KAAK,MAAM,EAAO,SAAI,QAAQ,KAAK,MAAM,EAAE,GAAG,KAAK,UAAU,KAAK,MAAO,OAAO,IAAI,KAAK,GAAG,EAAO,YAAO,IAAI,IAAI,WAAW,IAAI,EAAE,GAAG,EAAE,OAAO,IAAI,IAAI,YAAY,OAAO,YAAc,IAAY,IAAI,YAAY,MAAM,EAAE,OAAU,SAAS,iBAAiB,CAAC,KAAK,IAAI,eAAe,CAAC,IAAI,OAAO,IAAI,eAAmB,OAAO,IAAI,MAAM,KAAK,SAAS,EAAE,QAAQ,QAAQ,EAAE,OAAO,GAAG,OAAO,IAAI,IAAI,KAAK,UAAU,YAAa,OAAO,YAAY,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,EAAM,KAAC,IAAI,IAAI,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,GAAG,KAAK,OAAO,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,OAAO,aAAa,EAAE,EAAE,SAAS,IAAI,GAAG,KAAK,OAAO,GAAG,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,OAAO,cAAc,GAAG,KAAK,EAAE,EAAE,EAAE,SAAS,IAAI,GAAG,KAAK,OAAO,GAAG,IAAI,GAAG,MAAM,IAAK,IAAI,GAAG,KAAK,GAAG,IAAI,EAAE,GAAQ,SAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,KAAK,OAAO,GAAG,GAAG,GAAG,MAAO,KAAK,OAAO,aAAa,EAAE,EAAM,KAAC,IAAI,GAAG,GAAG,MAAM,KAAK,OAAO,aAAa,MAAM,IAAI,GAAG,MAAM,GAAG,IAAI,IAAI,OAAO,IAAI,SAAS,YAAY,CAAC,IAAI,eAAe,CAAC,OAAO,IAAI,kBAAkB,OAAO,IAAI,cAAc,EAAE,GAAG,SAAS,OAAO,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE,SAAS,EAAG,GAAG,SAAS,EAAE,SAAS,OAAO,EAAE,IAAI,OAAO,MAAM,OAAO,OAAO,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,SAAS,0BAA0B,CAAC,IAAI,CAAC,OAAO,IAAI,QAAO,MAAS,MAAM,IAAI,UAAU,GAAG,EAAE,QAAO,OAAU,OAAO,IAAI,WAAW,GAAG,EAAE,QAAO,OAAU,OAAO,IAAI,WAAW,GAAG,EAAE,QAAO,OAAU,OAAO,IAAI,WAAW,GAAG,EAAE,QAAO,QAAW,QAAQ,IAAI,YAAY,GAAG,EAAE,QAAO,QAAW,QAAQ,IAAI,YAAY,GAAG,EAAE,QAAO,QAAW,QAAQ,IAAI,aAAa,GAAG,EAAE,QAAO,QAAW,QAAQ,IAAI,aAAa,GAAG,EAAE,IAAI,eAAe,QAAO,gBAAmB,SAAa,UAAc,aAAa,CAAC,EAAM,WAAW,CAAC,EAAM,cAAc,CAAC,EAAM,mBAAmB,GAAM,SAAS,MAAM,EAAE,CAAC,GAAG,QAAO,OAAU,CAAC,GAAG,OAAO,QAAO,QAAW,WAAW,QAAO,OAAU,CAAC,QAAO,MAAS,EAAE,MAAM,QAAO,OAAU,OAAQ,YAAY,QAAO,OAAU,MAAM,CAAC,EAAG,qBAAqB,YAAY,EAAE,SAAS,WAAW,EAAE,CAAC,mBAAmB,GAAK,qBAAqB,UAAU,EAAE,SAAS,OAAO,EAAE,CAAC,GAAG,QAAO,QAAW,CAAC,GAAG,OAAO,QAAO,SAAY,WAAW,QAAO,QAAW,CAAC,QAAO,OAAU,EAAE,MAAM,QAAO,QAAW,OAAQ,aAAa,QAAO,QAAW,MAAM,CAAC,EAAG,qBAAqB,aAAa,EAAE,SAAS,WAAW,CAAC,GAAG,CAAC,aAAa,QAAQ,EAAE,EAAE,SAAS,SAAS,CAAC,GAAG,CAAC,WAAW,QAAQ,EAAE,EAAE,SAAS,YAAY,CAAC,GAAG,CAAC,cAAc,QAAQ,EAAE,EAAE,IAAI,gBAAgB,EAAM,qBAAqB,KAAS,sBAAsB,KAAK,SAAS,gBAAgB,CAAC,GAAG,CAAmB,GAAlB,kBAAqB,QAAO,uBAA2B,QAAO,uBAA0B,eAAe,EAAG,SAAS,mBAAmB,CAAC,GAAG,CAAmB,GAAlB,kBAAqB,QAAO,uBAA2B,QAAO,uBAA0B,eAAe,EAAE,GAAG,iBAAiB,EAAE,CAAC,GAAG,uBAAuB,KAAM,cAAc,oBAAoB,EAAE,qBAAqB,KAAK,GAAG,sBAAsB,CAAC,IAAI,SAAS,sBAAsB,sBAAsB,KAAK,SAAS,IAAI,QAAO,gBAAmB,CAAC,EAAE,QAAO,gBAAmB,CAAC,EAAE,SAAS,KAAK,CAAC,KAAK,CAAC,GAAG,QAAO,QAAY,QAAO,QAAW,IAAI,EAAE,MAAM,GAAG,IAAI,IAAI,EAAE,MAAM,GAAK,WAAW,EAAE,KAAK,SAAS,KAAK,+CAA+C,IAAI,EAAE,IAAI,YAAY,aAAa,IAAI,EAAE,MAAM,EAAE,IAAI,cAAc,wCAAwC,SAAS,SAAS,CAAC,SAAS,CAAC,OAAO,SAAS,WAAW,aAAa,EAAE,SAAS,SAAS,CAAC,SAAS,CAAC,OAAO,SAAS,WAAW,SAAS,EAAE,IAAI,eAAe,cAAc,GAAG,CAAC,UAAU,cAAc,EAAG,eAAe,WAAW,cAAc,EAAE,SAAS,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,gBAAgB,WAAY,OAAO,IAAI,WAAW,UAAU,EAAE,GAAG,WAAY,OAAO,WAAW,IAAI,EAAO,UAAK,kDAAmD,MAAM,KAAI,CAAC,MAAM,IAAG,GAAG,SAAS,gBAAgB,EAAE,CAAC,GAAG,CAAC,aAAa,oBAAoB,wBAAwB,GAAG,OAAO,QAAQ,YAAY,CAAC,UAAU,cAAc,EAAG,OAAO,MAAM,eAAe,CAAC,YAAY,aAAa,CAAC,EAAE,KAAK,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,GAAO,KAAK,uCAAuC,eAAe,IAAI,OAAO,SAAS,YAAe,EAAE,EAAE,MAAM,QAAQ,EAAE,CAAC,OAAO,UAAU,cAAc,EAAE,EAAO,QAAG,UAAW,OAAO,IAAI,QAAQ,QAAQ,CAAC,SAAQ,OAAO,CAAC,UAAU,eAAe,QAAQ,CAAC,SAAS,CAAC,SAAQ,IAAI,WAAW,QAAQ,CAAC,GAAG,MAAM,EAAE,EAAI,OAAO,QAAQ,QAAQ,EAAE,KAAK,QAAQ,EAAE,CAAC,OAAO,UAAU,cAAc,EAAE,EAAE,SAAS,UAAU,EAAE,CAAC,IAAI,KAAK,CAAC,EAAI,aAAa,EAAE,SAAS,eAAe,CAAC,SAAS,QAAO,CAAC,IAAI,SAAQ,SAAS,QAAQ,QAAO,IAAO,SAAQ,WAAW,QAAO,IAAO,EAAK,2BAA2B,WAAW,MAAM,EAAE,UAAU,QAAO,IAAO,EAAK,UAAU,QAAO,IAAO,CAAI,EAAE,oBAAoB,kBAAkB,EAAE,iBAAiB,kBAAkB,EAAE,SAAS,0BAA0B,CAAC,OAAO,CAAC,gBAAgB,OAAO,QAAW,EAAE,SAAS,sBAAsB,CAAC,SAAS,CAAC,OAAO,iBAAiB,EAAE,KAAK,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,YAAY,YAAY,OAAO,IAAI,EAAE,OAAO,OAAO,EAAE,KAAK,SAAS,QAAQ,CAAC,OAAO,CAAC,IAAI,0CAA0C,MAAM,EAAE,MAAM,MAAM,EAAE,EAAE,SAAS,gBAAgB,EAAE,CAAC,GAAG,CAAC,YAAY,OAAO,YAAY,uBAAuB,YAAY,CAAC,UAAU,cAAc,GAAG,CAAC,UAAU,cAAc,GAAG,OAAO,QAAQ,WAAY,OAAO,MAAM,eAAe,CAAC,YAAY,aAAa,CAAC,EAAE,KAAK,QAAQ,CAAC,SAAS,CAAC,IAAI,OAAO,YAAY,qBAAqB,SAAS,IAAI,EAAE,OAAO,OAAO,KAAK,2BAA2B,QAAQ,CAAC,OAAO,CAAgG,OAA/F,IAAI,kCAAkC,MAAM,EAAE,IAAI,2CAA2C,EAAS,uBAAuB,0BAA0B,EAAE,EAAE,EAAO,YAAO,uBAAuB,0BAA0B,EAAG,GAAG,QAAO,gBAAoB,GAAG,CAAC,IAAI,SAAQ,QAAO,gBAAmB,KAAK,eAAe,EAAE,OAAO,SAAQ,MAAM,EAAE,CAA8D,OAA7D,IAAI,sDAAsD,CAAC,EAAS,GAA0B,OAAnB,iBAAiB,EAAQ,CAAC,EAAE,SAAS,oBAAoB,CAAC,UAAU,CAAC,MAAM,UAAU,OAAO,EAAE,CAAC,IAAI,SAAS,UAAU,MAAM,EAAE,GAAG,OAAO,UAAU,WAAW,CAAC,SAAS,OAAM,EAAE,SAAS,IAAI,KAAK,SAAS,KAAK,GAAG,OAAO,OAAO,SAAU,GAAG,SAAS,MAAM,OAAW,UAAU,IAAI,IAAI,EAAE,EAAO,eAAU,IAAI,IAAI,EAAE,SAAS,GAAG,EAAQ,UAAK,SAAS,MAAM,OAAU,KAAK,SAAS,GAAG,GAAI,SAAS,sBAAsB,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,WAAW,KAAK,IAAI,IAAI,GAAG,EAAE,SAAS,yBAAyB,CAAC,KAAK,CAAC,GAAG,CAAkG,OAAjG,WAAW,KAAK,KAAK,OAAO,WAAW,QAAQ,EAAE,EAAE,2BAA2B,WAAW,MAAM,EAAS,EAAE,MAAM,EAAE,GAAG,SAAS,uBAAuB,CAAC,cAAc,CAAC,IAAI,QAAQ,OAAO,OAAO,cAAc,gBAAgB,EAAE,IAAI,YAAY,WAAW,GAAG,cAAc,YAAa,MAAO,GAAM,QAAQ,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,IAAI,kBAAkB,SAAS,EAAE,IAAG,SAAS,kBAAkB,KAAK,IAAI,kBAAkB,cAAc,SAAS,EAAE,IAAI,QAAQ,KAAK,IAAI,YAAY,QAAQ,KAAK,IAAI,cAAc,iBAAiB,EAAE,KAAK,CAAC,EAAM,YAAY,0BAA0B,OAAO,EAAE,GAAG,YAAa,MAAO,GAAM,MAAO,GAAM,IAAI,cAAc,CAAC,EAAI,uBAAuB,EAAI,uBAAuB,EAAM,IAAI,WAAW,EAAM,mBAAmB,QAAO,mBAAsB,QAAQ,EAAE,CAAC,OAAO,mBAAmB,QAAO,mBAAsB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,aAAa,QAAO,aAAgB,QAAQ,EAAE,CAAC,OAAO,aAAa,QAAO,aAAgB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,QAAQ,QAAO,QAAW,QAAQ,EAAE,CAAC,OAAO,QAAQ,QAAO,QAAW,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,MAAM,QAAO,MAAS,QAAQ,EAAE,CAAC,OAAO,MAAM,QAAO,MAAS,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,eAAe,QAAO,eAAkB,QAAQ,EAAE,CAAC,OAAO,eAAe,QAAO,eAAkB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,sBAAsB,QAAO,sBAAyB,QAAQ,EAAE,CAAC,OAAO,sBAAsB,QAAO,sBAAyB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,mBAAmB,QAAO,mBAAsB,QAAQ,EAAE,CAAC,OAAO,mBAAmB,QAAO,mBAAsB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,iBAAiB,QAAO,iBAAoB,QAAQ,EAAE,CAAC,OAAO,iBAAiB,QAAO,iBAAoB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,mBAAmB,QAAO,mBAAsB,QAAQ,EAAE,CAAC,OAAO,mBAAmB,QAAO,mBAAsB,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAO,WAAW,QAAO,WAAc,QAAQ,EAAE,CAAC,OAAO,WAAW,QAAO,WAAc,QAAO,IAAO,GAAM,MAAM,KAAK,SAAS,GAAG,QAAO,SAAY,SAAS,QAAO,aAAgB,aAAa,QAAO,aAAgB,aAAa,IAAI,UAAU,SAAS,UAAU,CAAC,OAAO,CAAC,KAAK,KAAK,aAAa,KAAK,QAAQ,gCAAgC,OAAO,IAAI,KAAK,OAAO,OAAO,sBAAsB,SAAS,SAAS,EAAE,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,GAAG,CAAC,UAAU,sBAAsB,WAAW,SAAS,GAAG,CAAC,KAAK,CAAuB,GAAtB,KAAK,MAAM,WAAc,gBAAgB,EAAG,OAAgB,GAAT,OAAO,EAAK,gBAAgB,EAAG,OAAO,SAAS,KAAK,EAAE,CAAC,GAAG,UAAU,OAA+C,GAAxC,UAAU,GAAK,QAAO,UAAa,GAAQ,MAAM,OAAqB,GAAd,YAAY,EAAK,QAAO,qBAAwB,QAAO,qBAAwB,EAAE,QAAQ,EAAE,GAAG,QAAO,UAAc,QAAO,UAAa,YAAY,EAAE,WAAW,QAAQ,EAAE,CAAC,WAAW,QAAQ,EAAE,CAAC,QAAO,UAAa,EAAE,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAO,WAAM,EAAG,QAAO,IAAO,IAAI,GAAG,QAAO,QAAW,CAAC,GAAG,OAAO,QAAO,SAAY,WAAW,QAAO,QAAW,CAAC,QAAO,OAAU,EAAE,MAAM,QAAO,QAAW,OAAO,EAAG,QAAO,QAAW,IAAI,EAAE,EAAG,IAAI,EAAE,GAAG,OAAO,QAAS,IAAY,QAAO,QAAQ,QAAO,QAAO,cAAc,QAAQ,EAAE,CAAC,GAAG,OAAO,KAAO,IAAa,OAAO,KAAK,OAA4H,GAArH,QAAO,SAAS,WAAW,UAAU,IAAI,OAAO,MAAM,OAAO,OAAO,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,OAAa,OAAO,QAAS,IAAa,OAAO,QAAO,sJCA33b,QAAS,CAAC,KAAM,QAAS,CACtB,GAAI,OAAO,SAAW,YAAc,OAAO,IACvC,OAAO,CAAC,EAAG,OAAO,EACf,QAAI,OAAO,UAAW,UAAY,QAAO,QAC5C,QAAO,QAAU,QAAQ,EAEzB,UAAK,OAAS,QAAQ,IAE3B,OAAO,KAAS,IAAc,KAAO,SAAM,QAAS,EAAG,CACtD,IAAM,OAAS,OAAO,KAAS,IAAc,KAAO,KAK9C,UAAY,CACd,QAAS,EACT,QAAS,EACT,SAAU,CACd,EAEA,SAAS,UAAU,CAAC,IAAK,CACrB,GAAI,WAAW,SACX,OAAO,WAAW,SAEtB,GAAI,WAAW,QACX,OAAO,QAAQ,QAAQ,WAAW,OAAO,EAE7C,IAAI,QACJ,GACI,OAAO,SACP,OAAO,QAAQ,UACf,OAAO,QAAQ,SAAS,KAExB,QAAU,eAAe,EAAE,KACvB,CAAC,UACG,IAAI,QAAQ,CAAC,WAAY,CACrB,QAAO,QAAU,IAAM,SAAQ,OAAM,EACxC,CACT,EAEA,aAAU,eAAe,EAAE,KAAK,CAAC,aAAe,CAC5C,IAAM,WAAa,IAAM,iBAAiB,GAAG,EAAI,OACjD,OAAO,SAAS,WAAY,UAAU,EACzC,EAGL,OADA,WAAW,SAAW,QACf,QAAQ,KAAK,CAAC,UAAW,CAG5B,OAFA,WAAW,QAAU,QACrB,OAAO,WAAW,SACX,QACV,EAGL,SAAS,QAAQ,CAAC,WAAY,WAAY,CACtC,OAAO,IAAI,QAAQ,CAAC,WAAY,CAQ5B,OAPA,OAAO,OAAS,CACZ,WACA,WACA,OAAO,EAAG,CACN,SAAQ,MAAM,EAEtB,EACO,eAAe,EACzB,EAGL,SAAS,cAAc,EAAG,CACtB,GAAI,OAAO,qBACP,OAAO,OAAO,qBAAqB,EAGnC,OAAO,QAAQ,wBAAoC,EAK3D,SAAS,cAAc,EAAG,CACtB,GAAI,OAAO,qBACP,OAAO,OAAO,qBAAqB,EAGnC,OAAO,QAAQ,yBAAsC,EAAE,KACnD,CAAC,aAAe,CACZ,OAAO,iBAAiB,UAAU,EAE1C,EAUR,SAAS,gBAAgB,CAAC,OAAQ,CAC9B,IAAM,KAAO,KAAK,MAAM,EAClB,OAAS,IAAI,WAAW,IAAI,YAAY,KAAK,MAAM,CAAC,EAC1D,QAAS,EAAI,EAAG,EAAI,KAAK,OAAQ,IAC7B,OAAO,GAAK,KAAK,WAAW,CAAC,EAEjC,OAAO,OAGX,SAAS,gBAAgB,CAAC,IAAK,CAO3B,IAAM,cAAgB,KAAK,IACvB,KAAK,IAAI,KAAK,KAAM,IAPb,KAGY,KAI2B,EAAG,GAAG,EAAI,IAFvC,KAIrB,EAEA,OAAO,IAAI,YAAY,OAAO,CAC1B,QAAS,cACT,QARiB,KASrB,CAAC,EAGL,SAAS,aAAa,CAAC,QAAQ,IAAK,CAChC,OAAO,QAAO,SAAS,IAAK,KAAM,QAAO,YAAY,EAGzD,SAAS,gBAAgB,CAAC,QAAQ,IAAK,CACnC,IAAM,oBAAsB,IAAI,WAAW,CAAC,GAAG,IAAK,CAAC,CAAC,EACtD,OAAO,cAAc,QAAQ,mBAAmB,EAGpD,SAAS,UAAU,CAAC,IAAK,CACrB,GAAI,OAAO,MAAQ,SACf,OAAO,IAEX,GAAI,OAAO,cAAgB,WACvB,OAAO,IAAI,YAAY,EAAE,OAAO,GAAG,EAChC,QAAI,OAAO,SAAW,WACzB,OAAO,OAAO,KAAK,GAAG,EAEtB,WAAU,MAAM,+BAA+B,EAwBvD,SAAS,UAAU,CAAC,OAAQ,CACxB,IAAM,MAAQ,OAAO,KAAO,KAC5B,OAAO,WAAW,KAAK,EAAE,KAAK,CAAC,UAAW,CACtC,IAAM,MAAQ,OAAO,MAAQ,EACvB,YAAc,OAAO,aAAe,EACpC,WAAa,WAAW,OAAO,IAAI,EACnC,IAAM,iBAAiB,QAAQ,UAAU,EACzC,OAAS,WAAW,OACpB,YAAc,WAAW,OAAO,IAAI,EACpC,KAAO,iBAAiB,QAAQ,WAAW,EAC3C,QAAU,YAAY,OACtB,WAAa,OAAO,MAAQ,UAAU,QACtC,KAAO,QAAO,SACZ,MAAM,OAAO,SAAW,EAAE,EAC9B,KACA,QAAO,YACX,EACM,OAAS,OAAO,OAChB,cAAc,QAAQ,OAAO,MAAM,EACnC,EACA,UAAY,OAAO,OAAS,OAAO,OAAO,WAAa,EACvD,GAAK,OAAO,GAAK,cAAc,QAAQ,OAAO,EAAE,EAAI,EACpD,MAAQ,OAAO,GAAK,OAAO,GAAG,WAAa,EAC3C,QAAU,OAAO,SAAW,GAC5B,WAAa,QAAO,mBACtB,MACA,MACA,YACA,QACA,QACA,UACJ,EACM,QAAU,QAAO,SACf,MAAM,WAAa,CAAC,EACxB,KACA,QAAO,YACX,EACM,QAAU,GACZ,IACA,IACJ,GAAI,CACA,IAAM,QAAO,iBACT,MACA,MACA,YACA,IACA,OACA,KACA,QACA,KACA,QACA,QACA,WACA,WACA,OACA,UACA,GACA,MApBQ,EAsBZ,EACF,MAAO,EAAG,CACR,IAAM,EAEV,IAAI,OACJ,GAAI,MAAQ,GAAK,CAAC,IAAK,CACnB,IAAI,QAAU,GACR,QAAU,IAAI,WAAW,OAAO,EACtC,QAAS,EAAI,EAAG,EAAI,QAAS,IAAK,CAC9B,IAAM,KAAO,QAAO,MAAM,KAAO,GACjC,QAAQ,GAAK,KACb,UAAY,KAAO,IAAO,MAAM,SAAS,EAAE,GAAG,MAAM,EAAE,EAE1D,IAAM,WAAa,QAAO,aAAa,OAAO,EAC9C,OAAS,CACL,KAAM,QACN,QAAS,QACT,QAAS,UACb,EACG,KACH,GAAI,CACA,GAAI,CAAC,IACD,IAAM,QAAO,aACT,QAAO,sBAAsB,GAAG,CACpC,EAEN,MAAO,EAAG,EACZ,OAAS,CAAE,QAAS,IAAK,KAAM,GAAI,EAEvC,GAAI,CAKA,GAJA,QAAO,MAAM,GAAG,EAChB,QAAO,MAAM,IAAI,EACjB,QAAO,MAAM,IAAI,EACjB,QAAO,MAAM,OAAO,EAChB,GACA,QAAO,MAAM,EAAE,EAEnB,GAAI,OACA,QAAO,MAAM,MAAM,EAEzB,MAAO,EAAG,EACZ,GAAI,IACA,MAAM,OAEN,YAAO,OAEd,EAmBL,SAAS,YAAY,CAAC,OAAQ,CAC1B,OAAO,WAAW,EAAE,KAAK,CAAC,UAAW,CACjC,IAAM,WAAa,WAAW,OAAO,IAAI,EACnC,IAAM,iBAAiB,QAAQ,UAAU,EACzC,OAAS,WAAW,OACpB,OAAS,OAAO,OAChB,cAAc,QAAQ,OAAO,MAAM,EACnC,EACA,UAAY,OAAO,OAAS,OAAO,OAAO,WAAa,EACvD,GAAK,OAAO,GAAK,cAAc,QAAQ,OAAO,EAAE,EAAI,EACpD,MAAQ,OAAO,GAAK,OAAO,GAAG,WAAa,EAC3C,WAAa,WAAW,OAAO,OAAO,EACtC,IAAM,iBAAiB,QAAQ,UAAU,EAC3C,WAAa,OAAO,KACxB,GAAI,aAAe,OAAW,CAC1B,IAAI,QAAU,OAAO,QAAQ,MAAM,GAAG,EAAE,GACxC,GAAI,QACA,QAAU,QAAQ,QAAQ,IAAK,GAAG,EAClC,WAAa,UAAU,UAAY,UAAU,QAGrD,IAAI,IACA,IACJ,GAAI,CACA,IAAM,QAAO,mBACT,IACA,IACA,OACA,OACA,UACA,GACA,MACA,UACJ,EACF,MAAO,EAAG,CACR,IAAM,EAEV,IAAI,OACJ,GAAI,KAAO,IAAK,CACZ,GAAI,CACA,GAAI,CAAC,IACD,IAAM,QAAO,aACT,QAAO,sBAAsB,GAAG,CACpC,EAEN,MAAO,EAAG,EACZ,OAAS,CAAE,QAAS,IAAK,KAAM,GAAI,EAEvC,GAAI,CACA,QAAO,MAAM,GAAG,EAChB,QAAO,MAAM,GAAG,EAClB,MAAO,EAAG,EACZ,GAAI,IACA,MAAM,OAEN,YAAO,OAEd,EAGL,SAAS,aAAa,EAAG,CACrB,GAAI,WAAW,QACX,WAAW,QAAQ,cAAc,EACjC,OAAO,WAAW,SAClB,OAAO,WAAW,QAI1B,MAAO,CACH,UACA,KAAM,WACN,OAAQ,aACR,aACJ,EACH,iKC1WM,IAAM,cAAgB,CAC3B,qBAAsB,EACtB,yBAA0B,EAC1B,mBAAoB,CAAC,EAAG,CAAC,EAGzB,IAAK,CACH,KAAM,UACN,OAAQ,IACR,UAAW,EACb,EAGA,OAAQ,CACN,KAAM,KACN,WAAY,GACZ,WAAY,MACZ,YAAa,EACb,SAAU,EACZ,EAGA,YAAa,0BAGb,IAAK,CACH,QAAS,WACT,MAAO,OACP,GAAI,cACN,EAGA,SAAU,EACZ,ECjCO,MAAM,iBAAiB,KAAM,CAChC,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,WAEpB,CAEO,MAAM,wBAAwB,QAAS,CAC1C,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,kBAEpB,CAEO,MAAM,oBAAoB,QAAS,CACtC,WAAW,CAAC,QAAU,iBAAkB,CACpC,MAAM,OAAO,EACb,KAAK,KAAO,cAEpB,CAEO,MAAM,kBAAkB,QAAS,CACpC,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,YAEpB,CAEO,MAAM,yBAAyB,QAAS,CAC3C,WAAW,CAAC,QAAU,8BAA+B,CACjD,MAAM,OAAO,EACb,KAAK,KAAO,mBAEpB,CAEO,MAAM,oBAAoB,QAAS,CACtC,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,cAEpB,CAEO,MAAM,oBAAoB,QAAS,CACtC,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,cAEpB,CAEO,MAAM,oBAAoB,QAAS,CACtC,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,cAEpB,CAEO,MAAM,0BAA0B,QAAS,CAC5C,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,oBAEpB,CAEO,MAAM,yBAAyB,QAAS,CAC3C,WAAW,CAAC,QAAiB,CACzB,MAAM,OAAO,EACb,KAAK,KAAO,mBAEpB,CCpEO,SAAS,aAAa,CAAC,MAAyC,CACrE,IAAM,GAAK,iBAAiB,WAAa,MAAQ,IAAI,WAAW,KAAK,EACrE,GAAI,GAAG,aAAe,EAAG,MAAO,GAChC,IAAI,OAAS,GACb,QAAS,EAAI,EAAG,EAAI,GAAG,OAAQ,IAAK,QAAU,OAAO,aAAa,GAAG,EAAY,EACjF,GAAI,OAAO,OAAS,WAAY,OAAO,KAAK,MAAM,EAElD,OAAO,OAAO,KAAK,OAAQ,QAAQ,EAAE,SAAS,QAAQ,EAKxD,IAAM,eAAiB,QAEhB,SAAS,aAAa,CAAC,IAAyB,CACrD,GAAI,OAAO,MAAQ,UAAY,IAAI,KAAK,EAAE,SAAW,EACnD,MAAM,IAAI,gBAAgB,yCAAyC,EAIrE,GADgB,IAAI,QAAQ,OAAQ,EAAE,EAAE,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,EAChE,OAAS,eACnB,MAAM,IAAI,gBAAgB,wBAAwB,EAGpD,GAAI,CAEF,IAAM,SAAU,IAAI,QAAQ,OAAQ,EAAE,EAAE,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,EACtE,IAAM,SAAQ,OAAS,EACvB,WAAa,MAAQ,EAAI,SAAU,SAAU,IAAI,OAAO,EAAI,GAAG,EAErE,GAAI,OAAO,OAAS,WAAY,CAC9B,IAAM,OAAS,KAAK,UAAU,EACxB,IAAM,IAAI,WAAW,OAAO,MAAM,EACxC,QAAS,EAAI,EAAG,EAAI,OAAO,OAAQ,IAAK,IAAI,GAAK,OAAO,WAAW,CAAC,EACpE,OAAO,IAGT,IAAM,IAAM,OAAO,KAAK,WAAY,QAAQ,EAC5C,OAAO,IAAI,WAAW,IAAI,OAAQ,IAAI,WAAY,IAAI,UAAU,EAChE,KAAM,CACN,MAAM,IAAI,gBAAgB,sBAAsB,GCpCpD,SAAS,aAAa,CAAC,GAA6B,CAClD,GAAI,GAAG,aAAe,GAAK,GAAG,aAAe,GAAG,OAAO,YAAc,GAAG,kBAAkB,YACxF,OAAO,GAAG,OAEZ,OAAO,GAAG,MAAM,EAAE,OAGb,MAAM,iBAAkB,CAC7B,eAAe,EAAW,CACxB,IAAM,KAAO,IAAI,WAAW,cAAc,QAAQ,EAElD,OADA,OAAO,gBAAgB,IAAI,EACpB,cAAc,IAAI,OAGrB,UAAS,EAAuB,CACpC,GAAI,CACF,OAAO,MAAM,OAAO,OAAO,YACzB,CAAE,KAAM,cAAc,IAAI,KAAM,OAAQ,cAAc,IAAI,MAAO,EACjE,GACA,CAAC,UAAW,UAAW,UAAW,WAAW,CAC/C,EACA,MAAO,EAAG,CACV,MAAM,IAAI,YAAY,2BAA4B,GAAa,SAAW,GAAG,QAI3E,YAAW,CACf,IACA,IACA,IAC6C,CAC7C,GAAI,CACF,KAAK,UAAU,IAAK,CAAC,SAAS,EAAG,eAAe,EAChD,IAAM,GAAK,IAAI,WAAW,cAAc,IAAI,SAAS,EACrD,OAAO,gBAAgB,EAAE,EACzB,IAAM,KAAO,IAAI,YAAY,EAAE,OAAO,KAAK,UAAU,GAAG,CAAC,EACnD,KAAqB,IACvB,CAAE,KAAM,cAAc,IAAI,KAAM,GAAwB,eAAgB,GAAmB,EAC3F,CAAE,KAAM,cAAc,IAAI,KAAM,EAAsB,EAEpD,GAAK,MAAM,OAAO,OAAO,QAAQ,KAAM,IAAK,cAAc,IAAI,CAAC,EACrE,MAAO,CAAE,GAAI,cAAc,EAAE,EAAG,WAAY,cAAc,EAAE,CAAE,EAC9D,MAAO,EAAG,CACV,MAAM,IAAI,YAAY,sBAAuB,GAAa,SAAW,GAAG,QAItE,YAAwB,CAC5B,IACA,MACA,MACA,IACY,CACZ,GAAI,CAAC,OAAS,CAAC,MAAO,MAAM,IAAI,gBAAgB,gCAAgC,EAEhF,IAAM,QAAU,cAAc,KAAK,EAC7B,GAAK,cAAc,KAAK,EAE9B,GAAI,QAAQ,aAAe,cAAc,IAAI,UAC3C,MAAM,IAAI,gBAAgB,cAAc,cAAc,IAAI,iBAAiB,EAG7E,KAAK,UAAU,IAAK,CAAC,SAAS,EAAG,eAAe,EAEhD,IAAI,GACJ,GAAI,CACF,IAAM,KAAqB,IACvB,CAAE,KAAM,cAAc,IAAI,KAAM,GAAI,QAAyB,eAAgB,GAAoB,EACjG,CAAE,KAAM,cAAc,IAAI,KAAM,GAAI,OAAwB,EAChE,GAAK,MAAM,OAAO,OAAO,QAAQ,KAAM,IAAK,cAAc,EAAE,CAAC,EAC7D,MAAO,EAAG,CACV,MAAM,IAAI,YAAY,sBAAsB,EAG9C,GAAI,CACF,OAAO,KAAK,MAAM,IAAI,YAAY,EAAE,OAAO,EAAE,CAAC,EAC9C,KAAM,CACN,MAAM,IAAI,gBAAgB,kCAAkC,QAI1D,UAAS,CACb,UACA,WACA,IACA,YAAc,GACd,IACoB,CACpB,IAAM,QAAU,cAAc,SAAS,EACjC,QAAU,cAAc,UAAU,EAExC,GAAI,QAAQ,aAAe,cAAc,IAAI,UAC3C,MAAM,IAAI,gBAAgB,mBAAmB,cAAc,IAAI,iBAAiB,EAGlF,GAAI,CACF,KAAK,UAAU,IAAK,CAAC,WAAW,EAAG,aAAa,EAChD,IAAM,KAAqB,IACvB,CAAE,KAAM,cAAc,IAAI,KAAM,GAAI,QAAyB,eAAgB,GAAoB,EACjG,CAAE,KAAM,cAAc,IAAI,KAAM,GAAI,OAAwB,EAEhE,OAAO,MAAM,OAAO,OAAO,UACzB,MACA,cAAc,OAAO,EACrB,IACA,KACA,CAAE,KAAM,cAAc,IAAI,KAAM,OAAQ,cAAc,IAAI,MAAO,EACjE,YACA,YAAc,CAAC,UAAW,YAAa,UAAW,SAAS,EAAI,CAAC,UAAW,SAAS,CACtF,EACA,KAAM,CACN,MAAM,IAAI,YAAY,sBAAsB,QAI1C,QAAO,CACX,IACA,IACA,IACiD,CACjD,GAAI,CACF,KAAK,UAAU,IAAK,CAAC,SAAS,EAAG,WAAW,EAC5C,IAAM,GAAK,IAAI,WAAW,cAAc,IAAI,SAAS,EACrD,OAAO,gBAAgB,EAAE,EACzB,IAAM,KAAqB,IACvB,CAAE,KAAM,cAAc,IAAI,KAAM,GAAwB,eAAgB,GAAoB,EAC5F,CAAE,KAAM,cAAc,IAAI,KAAM,EAAsB,EACpD,QAAU,MAAM,OAAO,OAAO,QAAQ,MAAO,IAAK,IAAK,IAAI,EACjE,MAAO,CAAE,OAAQ,cAAc,EAAE,EAAG,WAAY,cAAc,OAAO,CAAE,EACvE,MAAO,EAAG,CACV,MAAM,IAAI,YAAY,mBAAoB,GAAa,SAAW,GAAG,GAIjE,SAAS,CAAC,IAAgB,SAAsB,MAAqB,CAC3E,GAAI,CAAC,KAAQ,IAAI,WAAiC,OAAS,cAAc,IAAI,KAC3E,MAAM,IAAI,gBAAgB,6BAA6B,mBAAmB,cAAc,IAAI,MAAM,EAEpG,QAAW,KAAK,SACd,GAAI,CAAC,IAAI,OAAO,SAAS,CAAC,EACxB,MAAM,IAAI,gBAAgB,gBAAgB,gBAAgB,OAAO,EAIzE,CCzIA,SAAS,gBAAgB,CAAC,IAAqC,CAC7D,MAAO,CACL,OAAQ,KAAK,QAAU,cAAc,IAAI,QACzC,UAAW,KAAK,WAAa,cAAc,IAAI,MAC/C,MAAO,KAAK,OAAS,cAAc,IAAI,EACzC,EAIF,SAAS,QAAQ,CAAC,IAAwB,CACxC,MAAO,GAAG,IAAI,WAAW,IAAI,cAAc,IAAI,QAU1C,MAAM,iBAAkB,OAEd,YAAa,IAAI,gBAEnB,OAAM,CAAC,MAAgD,CAClE,IAAM,IAAM,iBAAiB,KAAK,EAC5B,GAAK,SAAS,GAAG,EAGjB,YAAc,KAAK,WAAW,IAAI,EAAE,EAC1C,GAAI,YAAa,OAAO,YAGxB,GAAI,CAAC,WAAW,UAAW,CACzB,IAAM,EAAI,MAAM,KAAK,YAAY,EAEjC,OADA,KAAK,WAAW,IAAI,GAAI,CAAC,EAClB,EAGT,IAAM,GAAK,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,IAAM,IAAI,EAClD,GAAI,CACF,GAAI,CAAC,GAAI,CACP,IAAM,EAAI,MAAM,KAAK,YAAY,EAEjC,OADA,KAAK,WAAW,IAAI,GAAI,CAAC,EAClB,EAGT,IAAM,SAAkC,MAAM,IAAI,QAAQ,CAAC,QAAS,SAAW,CAE7E,IAAM,IADK,GAAG,YAAY,IAAI,UAAW,UAAU,EACpC,YAAY,IAAI,SAAS,EAAE,IAAI,IAAI,KAAK,EACvD,IAAI,UAAY,IAAM,QAAS,IAAI,QAAQ,KAAqB,MAAS,EACzE,IAAI,QAAU,IAAM,OAAO,IAAI,KAAK,EACrC,EAED,GAAI,SAEF,OADA,KAAK,WAAW,IAAI,GAAI,QAAQ,EACzB,SAIT,IAAM,IAAM,MAAM,KAAK,YAAY,EAanC,OAXA,MAAM,IAAI,QAAc,CAAC,QAAS,SAAW,CAE3C,IAAM,IADK,GAAG,YAAY,IAAI,UAAW,WAAW,EACrC,YAAY,IAAI,SAAS,EAAE,IAAI,CAAE,GAAI,IAAI,MAAO,GAAI,CAAC,EACpE,IAAI,UAAY,IAAM,QAAQ,EAC9B,IAAI,QAAU,IAAM,OAAO,IAAI,KAAK,EACrC,EAAE,MAAM,IAAM,EAEd,EAGD,KAAK,WAAW,IAAI,GAAI,GAAG,EACpB,IACP,KAAM,CAEN,IAAI,EAAI,KAAK,WAAW,IAAI,EAAE,EAC9B,GAAI,CAAC,EACH,EAAI,MAAM,KAAK,YAAY,EAC3B,KAAK,WAAW,IAAI,GAAI,CAAC,EAE3B,OAAO,SACP,CACA,GAAI,GAAI,GAAG,MAAM,eAIR,UAAS,CAAC,MAAgD,CACrE,IAAM,IAAM,iBAAiB,KAAK,EAC5B,GAAK,SAAS,GAAG,EAEjB,OAAS,MAAM,KAAK,YAAY,EAEtC,GAAI,CAAC,WAAW,UAEd,OADA,KAAK,WAAW,IAAI,GAAI,MAAM,EACvB,OAGT,IAAM,GAAK,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,IAAM,IAAI,EAClD,GAAI,CACF,GAAI,CAAC,GAEH,OADA,KAAK,WAAW,IAAI,GAAI,MAAM,EACvB,OAUT,OARA,MAAM,IAAI,QAAc,CAAC,QAAS,SAAW,CAE3C,IAAM,IADK,GAAG,YAAY,IAAI,UAAW,WAAW,EACrC,YAAY,IAAI,SAAS,EAAE,IAAI,CAAE,GAAI,IAAI,MAAO,IAAK,MAAO,CAAC,EAC5E,IAAI,UAAY,IAAM,QAAQ,EAC9B,IAAI,QAAU,IAAM,OAAO,IAAI,KAAK,EACrC,EAED,KAAK,WAAW,IAAI,GAAI,MAAM,EACvB,OACP,KAAM,CAEN,OADA,KAAK,WAAW,IAAI,GAAI,MAAM,EACvB,cACP,CACA,GAAI,GAAI,GAAG,MAAM,eAUR,iBAAgB,CAAC,MAA2C,CACvE,IAAM,IAAM,iBAAiB,KAAK,EAGlC,GAFA,KAAK,WAAW,OAAO,SAAS,GAAG,CAAC,EAEhC,CAAC,WAAW,UAAW,OAG3B,IAAM,GAAK,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,IAAM,IAAI,EAClD,GAAI,GACF,GAAI,CACF,MAAM,IAAI,QAAc,CAAC,QAAS,SAAW,CAE3C,IAAM,IADK,GAAG,YAAY,IAAI,UAAW,WAAW,EACrC,YAAY,IAAI,SAAS,EAAE,OAAO,IAAI,KAAK,EAC1D,IAAI,UAAY,IAAM,QAAQ,EAC9B,IAAI,QAAU,IAAM,OAAO,IAAI,KAAK,EACrC,EACD,GAAG,MAAM,EACT,OACA,KAAM,CAEN,GAAG,MAAM,EAKb,MAAM,IAAI,QAAc,CAAC,UAAY,CACnC,IAAM,IAAM,UAAU,eAAe,IAAI,MAAM,EAC/C,IAAI,UAAY,IAAM,QAAQ,EAC9B,IAAI,QAAU,IAAM,QAAQ,EAC7B,cAKkB,YAAW,EAAuB,CACrD,OAAO,MAAM,OAAO,OAAO,YACzB,CAAE,KAAM,cAAc,IAAI,KAAM,OAAQ,cAAc,IAAI,MAAO,EACjE,GACA,CAAC,UAAW,WAAW,CACzB,QAGa,OAAM,CAAC,IAAsC,CAC1D,OAAO,IAAI,QAAQ,CAAC,QAAS,SAAW,CACtC,GAAI,CACF,IAAM,IAAM,UAAU,KAAK,IAAI,OAAQ,CAAC,EACxC,IAAI,gBAAkB,IAAM,CAC1B,GAAI,CAAC,IAAI,OAAO,iBAAiB,SAAS,IAAI,SAAS,EACrD,IAAI,OAAO,kBAAkB,IAAI,UAAW,CAAE,QAAS,IAAK,CAAC,GAGjE,IAAI,UAAY,IAAM,QAAQ,IAAI,MAAM,EACxC,IAAI,QAAU,IACZ,OAAO,IAAI,kBAAkB,IAAI,OAAO,SAAW,iBAAiB,CAAC,EACvE,MAAO,EAAG,CACV,OAAO,IAAI,kBAAmB,GAAa,SAAW,uBAAuB,CAAC,GAEjF,EAEL,CCnMA,sCAEA,SAAS,cAAa,CAAC,GAA6B,CAClD,GAAI,GAAG,aAAe,GAAK,GAAG,aAAe,GAAG,OAAO,YAAc,GAAG,kBAAkB,YACxF,OAAO,GAAG,OAEZ,OAAO,GAAG,MAAM,EAAE,OAGpB,eAAsB,qBAAqB,CACzC,SACA,KACA,WAAa,cAAc,OAAO,WACd,CACpB,GAAI,OAAO,WAAa,UAAY,SAAS,SAAW,EACtD,MAAM,IAAI,gBAAgB,qCAAqC,EAGjE,GAAI,EAAE,gBAAgB,aAAe,KAAK,aAAe,cAAc,SACrE,MAAM,IAAI,gBAAgB,qCAAqC,cAAc,UAAU,EAGzF,IAAM,eAAiB,GACvB,GAAI,CAAC,OAAO,UAAU,UAAU,GAAK,WAAa,GAAK,WAAa,eAClE,MAAM,IAAI,gBAAgB,wCAAwC,iBAAiB,EAGrF,IAAI,OACJ,GAAI,CACF,OAAS,MAAa,YAAK,CACzB,KAAM,SACN,KACA,KAAM,WACN,IAAK,cAAc,OAAO,WAC1B,QAAS,cAAc,OAAO,SAC9B,YAAa,cAAc,OAAO,YAClC,KAAa,iBAAU,QACzB,CAAC,EACD,MAAO,EAAG,CACV,MAAM,IAAI,YAAY,6BAA8B,GAAa,SAAW,GAAG,EAGjF,GAAI,CAAC,QAAQ,KAAM,MAAM,IAAI,YAAY,yBAAyB,EAElE,GAAI,CACF,OAAO,MAAM,OAAO,OAAO,UACzB,MACA,eAAc,OAAO,IAAI,EACzB,CAAE,KAAM,cAAc,IAAI,KAAM,OAAQ,cAAc,IAAI,MAAO,EACjE,GACA,CAAC,UAAW,WAAW,CACzB,EACA,MAAO,EAAG,CACV,MAAM,IAAI,YAAY,iCAAkC,GAAa,SAAW,GAAG,GCnDhF,MAAM,eAAgB,CACnB,IAAwB,KACxB,QAAyB,KACzB,OAAwB,KAEhC,GAAG,CAAC,IAAgB,QAAiB,OAAgB,CACnD,KAAK,IAAM,IACX,KAAK,QAAU,QACf,KAAK,OAAS,OAGhB,KAAK,CAAC,QAAiB,OAAkC,CACvD,GAAI,CAAC,KAAK,IAAK,OAAO,KACtB,GAAI,KAAK,UAAY,SAAW,KAAK,SAAW,OAAQ,OAAO,KAAK,IACpE,OAAO,KAGT,KAAK,EAAG,CACN,KAAK,IAAM,KACX,KAAK,QAAU,KACf,KAAK,OAAS,KAElB,CCtBA,SAAS,aAAa,CAAC,EAAmB,CACxC,GAAI,CAAE,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,KAAQ,KAAM,CAAE,OAAO,EAAE,QAG/C,MAAM,cAAe,CAClB,IAER,WAAW,CAAC,IAAc,cAAc,YAAa,CACnD,KAAK,IAAM,IAGb,GAAG,EAA2B,CAC5B,IAAM,IAAM,aAAa,QAAQ,KAAK,GAAG,EACzC,GAAI,CAAC,IAAK,OAAO,KACjB,GAAI,CAAE,OAAO,KAAK,MAAM,GAAG,EAAwB,KAAM,CAAE,OAAO,MAGpE,gBAAgB,CAAC,IAAuB,CACtC,IAAM,EAAI,IACJ,KAAO,GAAG,MAAQ,GAClB,IAAM,GAAG,SAAW,GACpB,KAAO,GAAG,KAEhB,OACE,OAAS,sBACT,OAAS,8BACT,OAAS,IACT,OAAS,MACT,SAAS,KAAK,GAAG,EAIrB,GAAG,CAAC,IAA4B,CAC9B,IAAM,WAAa,KAAK,UAAU,GAAG,EACrC,GAAI,CAGF,GAFA,aAAa,QAAQ,KAAK,IAAK,UAAU,EAC3B,aAAa,QAAQ,KAAK,GAAG,IAC7B,WAAY,MAAM,IAAI,iBAAiB,wBAAwB,EAC7E,MAAO,EAAG,CACV,GAAI,KAAK,iBAAiB,CAAC,EACzB,MAAM,IAAI,iBAAiB,gCAAgC,cAAc,UAAU,UAAU,EAE/F,IAAM,IAAO,GAAa,SAAW,OAAO,CAAC,EAC7C,MAAM,IAAI,iBAAiB,2BAA2B,KAAK,GAI/D,KAAK,EAAS,CACZ,GAAI,CAAE,aAAa,WAAW,KAAK,GAAG,EAAK,KAAM,GAErD,CCpDO,MAAe,KAAM,CACJ,QAAtB,WAAW,CAAW,QAA6B,CAA7B,qBAiBZ,YAAY,CAAC,MAAoB,CACzC,KAAK,QAAQ,aAAa,KAAK,EAEnC,CCjBO,SAAS,WAAc,CAAC,MAAa,CAC1C,IAAM,KAAO,IAAI,QACX,SAAW,CAAC,KAAc,IAAe,CAC7C,IAAM,EAAI,OAAO,EACjB,GAAI,IAAM,YAAc,IAAM,SAC5B,MAAM,IAAI,gBAAgB,uDAAuD,EAEnF,GAAI,GAAK,IAAM,SAAU,CACvB,IAAM,EAAI,EACV,GAAI,KAAK,IAAI,CAAC,EACZ,MAAM,IAAI,gBAAgB,yDAAyD,EAErF,KAAK,IAAI,CAAC,EAEZ,OAAO,GAGT,GAAI,CACF,OAAO,KAAK,MAAM,KAAK,UAAU,MAAO,QAAQ,CAAC,EACjD,MAAO,EAAG,CACV,GAAI,aAAa,gBAAiB,MAAM,EACxC,MAAM,IAAI,gBAAgB,gCAAgC,GCrBvD,SAAS,kBAAqD,CAAC,UAAiC,CACrG,IAAI,QAAU,GACV,QAAa,UACb,YAAuC,IAAI,QAE/C,SAAS,KAAK,EAAS,CACrB,IAAM,UAAY,CAAC,MAAiB,CAClC,GAAI,CAAC,KAAO,OAAO,MAAQ,SAAU,OACrC,IAAM,IAAM,IACZ,QAAW,OAAO,OAAO,KAAK,GAAG,EAAG,CAClC,IAAM,EAAI,IAAI,KACd,GAAI,GAAK,OAAO,IAAM,SAAU,UAAU,CAAC,EAC3C,IAAI,KAAO,OAGf,UAAU,OAAO,EACjB,QAAU,GACV,QAAU,CAAC,EACX,YAAc,IAAI,QAGpB,IAAM,cAAgB,IAAM,IAAI,gBAAgB,mDAAmD,EAE7F,WAAa,CAAC,MAA0B,CAC5C,GAAI,CAAC,KAAO,OAAO,MAAQ,SAAU,OAAO,IAC5C,IAAM,OAAS,YAAY,IAAI,GAAG,EAClC,GAAI,OAAQ,OAAO,OAEnB,IAAM,QAAU,IAAI,MAAM,IAAgC,CACxD,GAAG,CAAC,OAAQ,KAAuB,CACjC,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAE/D,IAAM,EAAK,OAAe,MAC1B,OAAO,OAAO,IAAM,UAAY,IAAM,KAAO,WAAW,CAAC,EAAI,GAE/D,GAAG,EAAG,CAAE,MAAM,cAAc,GAC5B,cAAc,EAAG,CAAE,MAAM,cAAc,GACvC,cAAc,EAAG,CAAE,MAAM,cAAc,GACvC,OAAO,CAAC,OAAQ,CACd,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAC/D,OAAO,QAAQ,QAAQ,MAAM,GAE/B,wBAAwB,CAAC,OAAQ,KAAM,CACrC,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAC/D,GAAI,OAAO,UAAU,eAAe,KAAK,OAAQ,IAAI,EAGnD,MAAO,CAAE,aAAc,GAAM,WAAY,GAAM,SAAU,GAAO,MADjD,OAAe,KACwC,EAExE,QAEF,GAAG,CAAC,OAAQ,KAAM,CAChB,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAC/D,OAAO,QAAQ,IAAI,OAAQ,IAAI,EAEnC,CAAC,EAGD,OADA,YAAY,IAAI,IAAK,OAAO,EACrB,SAmCT,OAAO,IAAI,MAA+B,CAAC,EAhCY,CACrD,GAAG,CAAC,EAAG,KAAuB,CAC5B,GAAI,OAAS,QAAS,OAAO,MAC7B,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAE/D,IAAM,EAAK,QAAgB,MAC3B,OAAO,OAAO,IAAM,UAAY,IAAM,KAAO,WAAW,CAAC,EAAI,GAE/D,GAAG,EAAG,CAAE,MAAM,cAAc,GAC5B,cAAc,EAAG,CAAE,MAAM,cAAc,GACvC,cAAc,EAAG,CAAE,MAAM,cAAc,GACvC,OAAO,EAAG,CACR,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAC/D,MAAO,CAAC,GAAG,OAAO,KAAK,OAAO,EAAG,OAAO,GAE1C,wBAAwB,CAAC,EAAG,KAAuB,CACjD,GAAI,OAAS,QAAS,MAAO,CAAE,aAAc,GAAM,WAAY,GAAM,SAAU,GAAO,MAAO,KAAM,EACnG,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAC/D,GAAI,OAAO,UAAU,eAAe,KAAK,QAAS,IAAI,EAGpD,MAAO,CAAE,aAAc,GAAM,WAAY,GAAM,SAAU,GAAO,MADjD,QAAgB,KACuC,EAExE,QAEF,GAAG,CAAC,EAAG,KAAM,CACX,GAAI,OAAS,QAAS,MAAO,GAC7B,GAAI,QAAS,MAAM,IAAI,YAAY,4BAA4B,EAC/D,OAAO,OAAO,UAAU,eAAe,KAAK,QAAS,IAAI,EAE7D,CAE8D,EC7FzD,MAAM,qBAAqB,KAAM,MAChC,WAAU,CAAC,WAAa,GAAsB,CAClD,GAAI,WAAY,CACd,MAAM,KAAK,eAAe,EAC1B,OAGF,IAAM,SAAW,KAAK,QAAQ,MAAM,IAAI,EACxC,GAAI,CAAC,KAAK,QAAQ,eAAe,cAAc,QAAQ,EAAG,CACxD,KAAK,QAAQ,gBAAkB,iBAC/B,MAAM,KAAK,eAAe,EAC1B,OAKF,GAFA,KAAK,QAAQ,OAAS,UAEjB,KAAK,QAAQ,QAAQ,OAAO,QAAU,GAAK,EAC9C,KAAK,aAAa,IAAI,YAAY,KAAK,OAAO,CAAC,EAC1C,KACL,IAAM,UAAY,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,SAAS,EACpF,GAAI,CAGF,GAFA,MAAM,KAAK,QAAQ,iBAAiB,UAAW,GAAO,KAAK,QAAQ,eAAe,UAAU,OAAQ,QAAQ,CAAC,EAEzG,KAAK,QAAQ,eAAe,KAAK,QAAQ,EAC3C,MAAM,KAAK,QAAQ,cAAc,SAAU,SAAU,SAAS,EAEhE,KAAK,aAAa,IAAI,gBAAgB,KAAK,OAAO,CAAC,EACnD,KAAM,CACN,KAAK,QAAQ,gBAAkB,sBAC/B,MAAM,KAAK,eAAe,SAKlB,eAAc,EAAkB,CAC5C,IAAM,IAAM,MAAM,KAAK,QAAQ,IAAI,UAAU,EACvC,UAAY,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,SAAS,EAE9E,IAA0C,QAC1C,QAAU,KAAK,QAAQ,eAAe,aADI,QACc,cAAc,wBAAwB,GAC5F,OAAQ,YAAe,MAAM,KAAK,QAAQ,IAAI,QAAQ,IAAK,UAAW,OAAO,EAC/E,aAAe,MAAM,KAAK,QAAQ,IAAI,UAAU,OAAQ,WAAY,UAAW,GAAO,OAAO,EAE7F,QAAU,KAAK,QAAQ,eAAe,aALI,QAKc,cAAc,yBAA0B,OAAQ,UAAU,GAChH,GAAI,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,aAAc,CAAC,EAAG,OAAO,EAEvF,KAAK,QAAQ,OAAS,CACpB,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,GACN,OAAQ,EACR,GAAI,OACJ,WACA,IAf4C,OAgB9C,EACA,KAAM,CAAE,GAAI,UAAW,CACzB,EACA,KAAK,QAAQ,IAAM,aACnB,KAAK,QAAQ,QAAQ,EACrB,KAAK,aAAa,IAAI,gBAAgB,KAAK,OAAO,CAAC,EAGrD,qBAAqB,EAAY,CAAE,MAAU,MAAM,iBAAiB,EACpE,QAAQ,EAAY,CAAE,MAAU,MAAM,iBAAiB,EACvD,MAAM,CAAC,eAAuC,CAAE,MAAU,MAAM,iBAAiB,EACjF,iBAAiB,CAAC,eAAuC,CAAE,MAAU,MAAM,iBAAiB,EAC5F,oBAAoB,EAAkB,CAAE,MAAU,MAAM,iBAAiB,EACzE,oBAAoB,CAAC,kBAA2B,kBAA0C,CAAE,MAAU,MAAM,iBAAiB,EAC7H,IAAI,EAAS,CAAE,MAAU,MAAM,iBAAiB,EAChD,UAAU,EAAkB,CAAE,MAAU,MAAM,iBAAiB,EAC/D,OAA0C,EAAiB,CAAE,MAAU,MAAM,iBAAiB,EAC9F,OAA0C,CAAC,MAAyB,CAAE,MAAU,MAAM,iBAAiB,EACvG,UAAU,CAAC,qBAAgD,CAAE,MAAU,MAAM,iBAAiB,EAC9F,UAAU,CAAC,WAAoB,SAAoC,CAAE,MAAU,MAAM,iBAAiB,OAChG,MAAK,EAAkB,CAC3B,KAAK,QAAQ,QAAQ,MAAM,EAC3B,KAAK,QAAQ,IAAM,KACnB,KAAK,QAAQ,MAAM,MAAM,EACzB,MAAM,KAAK,QAAQ,kBAAkB,iBAAiB,KAAK,QAAQ,SAAS,EAC5E,MAAM,KAAK,WAAW,EAAI,EAE9B,CC1EO,IAAM,YAAc,CACzB,kBAAmB,MACjB,IACA,eACA,KACA,eACoB,CAEpB,IAAM,QAAU,eAAe,aADiB,SACC,cAAc,wBAAwB,GAC/E,OAAQ,YAAe,MAAM,IAAI,QAAQ,KAAK,IAAK,KAAK,IAAK,OAAO,EAEtE,QAAU,eAAe,aAJiB,SAM9C,cAAc,yBACd,OACA,UACF,GACQ,GAAI,YAAe,MAAM,IAAI,YAAY,KAAK,IAAK,aAAc,OAAO,EAE1E,OAA4B,CAChC,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,KAAK,QACX,OAAQ,KAAK,OACb,GAAI,OACJ,WACA,IAAK,KAAK,IACV,IApB4C,QAqB9C,EACA,KAAM,CAAE,GAAI,UAAW,CACzB,EACA,OAAO,KAAK,UAAU,MAAM,GAG9B,iBAAkB,CAAC,KAAc,YAAkC,CACjE,IAAI,EACJ,GAAI,CAAE,EAAI,KAAK,MAAM,IAAI,EAAK,KAAM,CAAE,MAAM,IAAI,YAAY,0BAA0B,EACtF,GAAI,CAAC,GAAK,OAAO,IAAM,UAAY,CAAE,EAAU,QAAU,CAAE,EAAU,KACnE,MAAM,IAAI,YAAY,0BAA0B,EAElD,IAAM,OAAS,EACf,GAAI,CAAC,UAAU,SAAU,OAAO,OAAO,CAAW,EAChD,MAAM,IAAI,YAAY,8BAA8B,OAAQ,OAAe,QAAQ,CAAC,GAAG,EAEzF,IAAM,kBACH,OAAe,OAAO,MAAQ,IAC7B,OAAO,OAAe,OAAS,GAAM,OAAe,OAAO,MAAQ,GACvE,MAAO,CAAE,OAAQ,iBAAkB,EAEvC,EClDO,MAAM,wBAAwB,KAAM,CACzC,qBAAqB,EAAY,CAC/B,MAAO,GAGT,QAAQ,EAAY,CAClB,MAAO,QAGH,OAAM,CAAC,eAAuC,OAI9C,kBAAiB,CAAC,eAAuC,CAG7D,GAFA,KAAK,QAAQ,cAAc,GAChB,OAAO,iBAAmB,SAAW,eAAe,KAAK,EAAI,IACjE,SAAW,EAChB,MAAM,IAAI,gBAAgB,2CAA2C,EAGvE,IAAM,UAAY,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,SAAS,EACpF,MAAM,KAAK,QAAQ,iBAAiB,UAAW,GAAM,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAO,CAAC,EAExH,IAAM,MAAQ,MAAM,KAAK,QAAQ,mBAAmB,EAE9C,QAAU,KAAK,QAAQ,IAAI,gBAAgB,EAC3C,OAAS,cAAc,OAAO,WAC9B,IAAM,MAAM,KAAK,QAAQ,sBAAsB,eAAgB,cAAc,OAAO,EAAG,MAAM,EAE7F,IAA0C,QAC1C,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,wBAAwB,EAC9F,QAAU,MAAM,KAAK,QAAQ,IAAI,QAAQ,KAAK,QAAQ,IAAM,IAAK,OAAO,EAExE,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,yBAA0B,QAAQ,OAAQ,QAAQ,UAAU,GAChI,GAAI,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAM,MAAO,OAAO,EAE/F,KAAK,QAAQ,OAAS,CACpB,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,QACN,OACA,GAAI,QAAQ,OACZ,WAAY,QAAQ,WACpB,GACF,EACA,KAAM,CAAE,GAAI,UAAW,CACzB,EAEA,KAAK,QAAQ,QAAQ,IAAI,IAAK,QAAS,MAAM,EAC7C,KAAK,QAAQ,IAAM,MAAM,KAAK,QAAQ,IAAI,UAAU,QAAQ,OAAQ,QAAQ,WAAY,IAAK,GAAO,OAAO,EAC3G,KAAK,QAAQ,QAAQ,EACrB,KAAK,aAAa,IAAI,oBAAoB,KAAK,OAAO,CAAC,OAGnD,qBAAoB,EAAkB,CAC1C,MAAM,IAAI,UAAU,2BAA2B,OAG3C,qBAAoB,CAAC,kBAA2B,kBAA0C,CAE9F,IADc,OAAO,oBAAsB,SAAW,kBAAkB,KAAK,EAAI,IACvE,SAAW,EACnB,MAAM,IAAI,gBAAgB,8CAA8C,EAE1E,MAAM,KAAK,kBAAkB,iBAAiB,EAGhD,IAAI,EAAS,OAIP,WAAU,EAAkB,CAChC,KAAK,QAAQ,cAAc,EAC3B,IAAM,UAAY,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,SAAS,EAEpF,MAAM,KAAK,QAAQ,iBAAiB,UAAW,GAAO,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAO,CAAC,EACzH,IAAM,MAAQ,MAAM,KAAK,QAAQ,mBAAmB,EAE9C,OAAS,MAAM,KAAK,QAAQ,IAAI,UAAU,EAE1C,aAAe,MAAM,KAAK,QAAQ,kBAAkB,UAAU,KAAK,QAAQ,SAAS,EACpF,IAA0C,QAC1C,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,wBAAwB,GAC5F,OAAQ,YAAe,MAAM,KAAK,QAAQ,IAAI,QAAQ,OAAQ,aAAc,OAAO,EAErF,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,yBAA0B,OAAQ,UAAU,GAChH,GAAI,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,OAAQ,MAAO,OAAO,EAEpF,KAAK,QAAQ,OAAS,CACpB,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,GACN,OAAQ,EACR,GAAI,OACJ,WACA,GACF,EACA,KAAM,CAAE,GAAI,UAAW,CACzB,EAEA,KAAK,QAAQ,IAAM,MAAM,KAAK,QAAQ,IAAI,UAAU,OAAQ,WAAY,aAAc,GAAO,OAAO,EACpG,QAAW,KAAK,OAAO,KAAK,KAAK,EAAI,MAAkC,GAAK,KAC5E,KAAK,QAAQ,QAAQ,OAGjB,QAA0C,EAA+B,CAG7E,GAFA,KAAK,QAAQ,cAAc,EAC3B,MAAM,KAAK,QAAQ,gBAAgB,EAC/B,CAAC,KAAK,QAAQ,OAAQ,KAAK,IAAM,CAAC,KAAK,QAAQ,OAAQ,KAAK,WAC9D,OAAO,mBAAmB,CAAC,CAAM,EAGnC,IAAM,QAAU,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,EAC3E,IAAM,MAAM,KAAK,QAAQ,IAAI,YAAqB,KAAK,QAAQ,IAAM,KAAK,QAAQ,OAAQ,KAAK,GAAI,KAAK,QAAQ,OAAQ,KAAK,WAAY,OAAO,EAQtJ,GAAI,EALF,CAAC,CAAC,KACF,OAAO,MAAQ,UACf,CAAC,MAAM,QAAQ,GAAG,GAClB,OAAO,eAAe,GAAa,IAAM,OAAO,WAGhD,MAAM,IAAI,gBAAgB,oCAAoC,EAEhE,OAAO,mBAAmB,GAAQ,OAG9B,QAA0C,CAAC,MAAyB,CAIxE,GAHA,KAAK,QAAQ,cAAc,EAC3B,MAAM,KAAK,QAAQ,gBAAgB,EAE/B,CAAC,OAAS,OAAO,QAAU,UAAY,MAAM,QAAQ,KAAK,EAC5D,MAAM,IAAI,gBAAgB,6BAA6B,EAGzD,IAAM,MAAQ,YAAY,KAAK,EACzB,QAAU,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,GACzE,GAAI,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAM,MAAO,OAAO,EAC/F,KAAK,QAAQ,OAAQ,KAAO,CAAE,GAAI,UAAW,EAC7C,KAAK,QAAQ,QAAQ,OAGjB,WAAU,CAAC,qBAAgD,CAC/D,GAAI,CAAC,sBAAwB,CAAC,qBAAqB,KAAK,EACtD,MAAM,IAAI,YAAY,yCAAyC,EAGjE,KAAK,QAAQ,cAAc,EAC3B,MAAM,KAAK,QAAQ,gBAAgB,EAEnC,IAAM,MAAQ,MAAM,KAAK,QAAQ,mBAAmB,EAG9C,UAAY,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,SAAS,EACpF,MAAM,KAAK,QAAQ,iBACjB,UACA,GACA,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,CACnE,EACA,IAAM,QAAU,KAAK,QAAQ,IAAI,gBAAgB,EAC3C,OAAS,cAAc,OAAO,WAC9B,IAAM,MAAM,KAAK,QAAQ,sBAC7B,qBACA,cAAc,OAAO,EACrB,MACF,EAEM,KAAmB,CAAE,IAAK,KAAK,QAAQ,IAAM,IAAK,QAAS,OAAQ,IAAK,EAAM,EACpF,OAAO,YAAY,kBAAkB,KAAK,QAAQ,IAAK,KAAK,QAAQ,eAAgB,KAAM,KAAK,EAGjG,UAAU,CAAC,WAAoB,SAAoC,CACjE,MAAU,MAAM,yBAAyB,EAE3C,KAAK,EAAkB,CACrB,OAAQ,SAAY,CAClB,KAAK,QAAQ,QAAQ,MAAM,EAC3B,KAAK,QAAQ,IAAM,KACnB,KAAK,QAAQ,MAAM,MAAM,EACzB,MAAM,KAAK,QAAQ,kBAAkB,iBAAiB,KAAK,QAAQ,SAAS,EAC5E,MAAM,IAAI,aAAa,KAAK,OAAO,EAAE,WAAW,EAAI,IACnD,EAEL,UAAU,CAAC,WAAqC,CAC9C,MAAU,MAAM,yBAAyB,EAE7C,CCzLO,MAAM,4BAA4B,KAAM,CAC7C,qBAAqB,EAAY,CAC/B,MAAO,GAGT,QAAQ,EAAY,CAClB,MAAO,QAGH,OAAM,CAAC,eAAuC,OAI9C,kBAAiB,CAAC,eAAuC,CAC7D,MAAM,IAAI,UAAU,yDAAyD,OAGzE,qBAAoB,EAAkB,CAC1C,KAAK,QAAQ,cAAc,EAC3B,KAAK,QAAQ,gBAAgB,EAE7B,MAAM,KAAK,QAAQ,iBAAiB,KAAK,QAAQ,kBAAkB,EAAG,GAAM,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAO,CAAC,EAE/I,IAAM,MAAQ,MAAM,KAAK,QAAQ,mBAAmB,EAE9C,UAAY,MAAM,KAAK,QAAQ,kBAAkB,OAAO,KAAK,QAAQ,SAAS,EAE9E,IAA0C,QAC1C,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,wBAAwB,GAC5F,OAAQ,YAAe,MAAM,KAAK,QAAQ,IAAI,QAAQ,KAAK,QAAQ,IAAM,UAAW,OAAO,EAE7F,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,yBAA0B,OAAQ,UAAU,GAChH,GAAI,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAM,MAAO,OAAO,EAE/F,KAAK,QAAQ,OAAS,CACpB,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,GACN,OAAQ,EACR,GAAI,OACJ,WACA,GACF,EACA,KAAM,CAAE,GAAI,UAAW,CACzB,EAEA,KAAK,QAAQ,IAAM,MAAM,KAAK,QAAQ,IAAI,UAAU,OAAQ,WAAY,UAAW,GAAO,OAAO,EACjG,KAAK,QAAQ,QAAQ,MAAM,EAC3B,KAAK,QAAQ,QAAQ,EACrB,KAAK,aAAa,IAAI,gBAAgB,KAAK,OAAO,CAAC,OAE/C,qBAAoB,CAAC,kBAA2B,kBAA0C,CAI9F,GAHA,KAAK,QAAQ,cAAc,GAEb,OAAO,oBAAsB,SAAW,kBAAkB,KAAK,EAAI,IACvE,SAAW,EACnB,MAAM,IAAI,gBAAgB,8CAA8C,EAI1E,IAAQ,KAAM,OAAQ,GAAI,YAAe,KAAK,QAAQ,OAAQ,OAC9D,GAAI,CACF,IAAM,UAAY,MAAM,KAAK,QAAQ,sBACnC,kBACA,cAAc,IAAI,EAClB,MACF,EACM,SAAU,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAO,EAClF,MAAM,KAAK,QAAQ,IAAI,UAAU,GAAI,WAAY,UAAW,GAAO,QAAO,EAC1E,KAAM,CACN,MAAM,IAAI,gBAAgB,yBAAyB,EAIrD,MAAM,KAAK,QAAQ,iBACjB,KAAK,QAAQ,kBAAkB,EAC/B,GACA,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAO,CACpE,EACA,IAAM,MAAQ,MAAM,KAAK,QAAQ,mBAAmB,EAE9C,QAAU,KAAK,QAAQ,IAAI,gBAAgB,EAC3C,UAAY,cAAc,OAAO,WACjC,OAAS,MAAM,KAAK,QAAQ,sBAChC,kBACA,cAAc,OAAO,EACrB,SACF,EAEM,IAA0C,QAC1C,QAAU,KAAK,QAAQ,eAAe,aAAa,IAAK,cAAc,wBAAwB,GAC5F,OAAQ,WAAY,eAAkB,MAAM,KAAK,QAAQ,IAAI,QAAQ,KAAK,QAAQ,IAAM,OAAQ,OAAO,EAEzG,QAAU,KAAK,QAAQ,eAAe,aAC1C,IACA,cAAc,yBACd,OACA,aACF,GACQ,GAAI,OAAQ,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAM,MAAO,OAAO,EAEvG,KAAK,QAAQ,OAAS,CACpB,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,QACN,OAAQ,UACR,GAAI,OACJ,WAAY,cACZ,GACF,EACA,KAAM,CAAE,GAAI,OAAQ,UAAW,CACjC,EAEA,KAAK,QAAQ,QAAQ,IAAI,OAAQ,QAAS,SAAS,EACnD,KAAK,QAAQ,IAAM,MAAM,KAAK,QAAQ,IAAI,UAAU,OAAQ,cAAe,OAAQ,GAAO,OAAO,EAEjG,KAAK,QAAQ,QAAQ,EAGvB,IAAI,EAAS,CACX,KAAK,QAAQ,QAAQ,MAAM,EAC3B,KAAK,QAAQ,IAAM,KACnB,KAAK,aAAa,IAAI,YAAY,KAAK,OAAO,CAAC,OAG3C,WAAU,EAAkB,CAChC,MAAM,IAAI,UAAU,kDAAkD,OAGlE,QAA0C,EAA+B,CAG7E,GAFA,KAAK,QAAQ,cAAc,EAC3B,KAAK,QAAQ,gBAAgB,EACzB,CAAC,KAAK,QAAQ,OAAQ,KAAK,IAAM,CAAC,KAAK,QAAQ,OAAQ,KAAK,WAC9D,OAAO,mBAAmB,CAAC,CAAM,EAGnC,IAAM,QAAU,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,EAC3E,IAAM,MAAM,KAAK,QAAQ,IAAI,YAAqB,KAAK,QAAQ,IAAM,KAAK,QAAQ,OAAQ,KAAK,GAAI,KAAK,QAAQ,OAAQ,KAAK,WAAY,OAAO,EAQtJ,GAAI,EALF,CAAC,CAAC,KACF,OAAO,MAAQ,UACf,CAAC,MAAM,QAAQ,GAAG,GAClB,OAAO,eAAe,GAAa,IAAM,OAAO,WAGhD,MAAM,IAAI,gBAAgB,oCAAoC,EAEhE,OAAO,mBAAmB,GAAQ,OAG9B,QAA0C,CAAC,MAAyB,CAIxE,GAHA,KAAK,QAAQ,cAAc,EAC3B,KAAK,QAAQ,gBAAgB,EAEzB,CAAC,OAAS,OAAO,QAAU,UAAY,MAAM,QAAQ,KAAK,EAC5D,MAAM,IAAI,gBAAgB,6BAA6B,EAGzD,IAAM,MAAQ,YAAY,KAAK,EACzB,QAAU,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,GACzE,GAAI,YAAe,MAAM,KAAK,QAAQ,IAAI,YAAY,KAAK,QAAQ,IAAM,MAAO,OAAO,EAC/F,KAAK,QAAQ,OAAQ,KAAO,CAAE,GAAI,UAAW,EAC7C,KAAK,QAAQ,QAAQ,OAGjB,WAAU,CAAC,qBAAgD,CAC/D,KAAK,QAAQ,cAAc,EAC3B,MAAM,KAAK,QAAQ,gBAAgB,EAEnC,IAAM,MAAQ,MAAM,KAAK,QAAQ,mBAAmB,EAG9C,WAAa,KAAK,QAAQ,kBAAkB,EAClD,MAAM,KAAK,QAAQ,iBACjB,WACA,GACA,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,CACnE,EAEA,IAAI,KACJ,GAAI,CAAC,qBAEH,KAAO,CACL,IAAK,KAAK,QAAQ,IAClB,IAAK,WACL,QAAU,KAAK,QAAQ,OAAQ,OAAe,KAC9C,OAAS,KAAK,QAAQ,OAAQ,OAAe,OAC7C,IAAK,EACP,EACK,KACL,GAAI,CAAC,qBAAqB,KAAK,EAAG,MAAM,IAAI,YAAY,4CAA4C,EACpG,IAAM,QAAU,KAAK,QAAQ,IAAI,gBAAgB,EAC3C,OAAS,cAAc,OAAO,WAC9B,IAAM,MAAM,KAAK,QAAQ,sBAC7B,qBACA,cAAc,OAAO,EACrB,MACF,EACA,KAAO,CAAE,IAAK,KAAK,QAAQ,IAAM,IAAK,QAAS,OAAQ,IAAK,EAAM,EAGpE,OAAO,YAAY,kBAAkB,KAAK,QAAQ,IAAK,KAAK,QAAQ,eAAgB,KAAM,KAAK,EAEjG,UAAU,CAAC,WAAoB,SAAoC,CACjE,MAAU,MAAM,yBAAyB,EAE3C,KAAK,EAAkB,CACrB,OAAQ,SAAY,CAClB,KAAK,QAAQ,QAAQ,MAAM,EAC3B,KAAK,QAAQ,IAAM,KACnB,KAAK,QAAQ,MAAM,MAAM,EACzB,MAAM,KAAK,QAAQ,kBAAkB,iBAAiB,KAAK,QAAQ,SAAS,EAC5E,MAAM,IAAI,aAAa,KAAK,OAAO,EAAE,WAAW,EAAI,IACnD,EAEL,UAAU,CAAC,WAAqC,CAC9C,MAAU,MAAM,yBAAyB,EAE7C,CCjOO,MAAM,oBAAoB,KAAM,CACrC,qBAAqB,EAAY,CAC/B,MAAO,GAGT,QAAQ,EAAY,CAClB,MAAO,QAGH,OAAM,CAAC,eAAuC,CAClD,GAAI,CAAC,KAAK,QAAQ,OAAQ,OAE1B,GAAI,OAAO,iBAAmB,UAAY,eAAe,KAAK,EAAE,SAAW,EACzE,MAAM,IAAI,gBAAgB,2CAA2C,EAGvE,IAAQ,KAAM,QAAW,KAAK,QAAQ,OAAO,OACvC,IAAM,MAAM,KAAK,QAAQ,sBAAsB,eAAgB,cAAc,IAAI,EAAG,MAAM,EAEhG,GAAI,CACF,KAAK,QAAQ,QAAQ,IAAI,IAAK,KAAM,MAAM,EAC1C,MAAM,KAAK,QAAQ,iBAAiB,IAAK,GAAO,KAAK,QAAQ,eAAe,UAAU,OAAQ,KAAK,QAAQ,MAAM,CAAC,EAClH,KAAM,CAEN,MADA,KAAK,QAAQ,QAAQ,MAAM,EACrB,IAAI,gBAAgB,yBAAyB,EAGrD,GAAI,KAAK,QAAQ,eAAe,KAAK,KAAK,QAAQ,MAAM,EACtD,MAAM,KAAK,QAAQ,cAAc,SAAU,KAAK,QAAQ,OAAQ,GAAG,EAErE,KAAK,aAAa,IAAI,oBAAoB,KAAK,OAAO,CAAC,OAGnD,kBAAiB,CAAC,eAAuC,CAC7D,MAAM,IAAI,iBAGN,qBAAoB,EAAkB,CAC1C,MAAM,IAAI,iBAGN,qBAAoB,CAAC,kBAA2B,kBAA0C,CAC9F,MAAM,KAAK,OAAO,iBAAiB,EAEnC,MAAM,KAAK,QAAQ,qBAAqB,kBAAmB,iBAAiB,EAG9E,IAAI,EAAS,OAIP,WAAU,EAAkB,CAChC,MAAM,IAAI,iBAGN,QAA0C,EAAiB,CAC/D,MAAM,IAAI,iBAGN,QAA0C,CAAC,MAAyB,CACxE,MAAM,IAAI,YAGZ,UAAU,CAAC,qBAAgD,CACzD,MAAU,MAAM,yBAAyB,EAE3C,UAAU,CAAC,WAAoB,SAAoC,CACjE,MAAU,MAAM,yBAAyB,EAE3C,KAAK,EAAkB,CACrB,OAAQ,SAAY,CAClB,KAAK,QAAQ,QAAQ,MAAM,EAC3B,KAAK,QAAQ,IAAM,KACnB,KAAK,QAAQ,MAAM,MAAM,EACzB,MAAM,KAAK,QAAQ,kBAAkB,iBAAiB,KAAK,QAAQ,SAAS,EAC5E,MAAM,IAAI,aAAa,KAAK,OAAO,EAAE,WAAW,EAAI,IACnD,EAEL,UAAU,CAAC,WAAqC,CAC9C,MAAU,MAAM,yBAAyB,EAE7C,CC5ES,MAAM,cAAe,CAER,WACA,UACC,IAHnB,WAAW,CACO,WACA,UACC,IACjB,CAHgB,2BACA,yBACC,aAGZ,SAAS,CACd,KACA,OACwB,CACxB,GAAI,QAAU,KAAK,KAAK,MAAM,EAAG,CAC/B,IAAM,IAAM,OAAO,OAAO,KAAO,QACjC,GAAI,OAAS,OACX,OAAO,KAAK,aAAa,IAAK,OAAO,OAAO,CAAC,EAE/C,OAAO,KAAK,aACV,IACA,OAAO,OAAO,EACd,OAAO,OAAO,GACd,OAAO,OAAO,UAChB,EAEF,OAGK,IAAI,CAAC,OAAsD,CAChE,OAAQ,OAAO,OAAe,IAAM,EAG/B,IAAI,CAAC,OAAsD,CAChE,OAAQ,OAAO,OAAe,IAAM,EAG/B,aAAa,CAAC,OAA2D,CAC9E,GAAI,CAAC,OAAQ,MAAO,GACpB,IAAiB,OAAX,EACW,KAAX,GAAI,OAEV,GAAI,CAAC,cAAc,mBAAmB,SAAS,EAAE,CAAC,EAAG,MAAO,GAC5D,GAAI,OAAO,EAAE,SAAW,UAAY,EAAE,OAAS,EAAG,MAAO,GACzD,GAAI,OAAO,EAAE,KAAO,UAAY,OAAO,EAAE,aAAe,SACtD,MAAO,GACT,GAAI,CAAC,GAAK,OAAO,EAAE,KAAO,UAAY,OAAO,EAAE,aAAe,SAC5D,MAAO,GAET,GAAI,EAAE,SAAW,GACf,GAAI,EAAE,OAAS,GAAI,MAAO,GAE1B,QAAI,OAAO,EAAE,OAAS,UAAY,EAAE,KAAK,SAAW,EAAG,MAAO,GAGhE,GAAI,EAAE,IAAM,GAAK,EAAE,KAAO,EAAE,MAAQ,QAAS,MAAO,GAEpD,GAAI,CAGF,GAFA,cAAc,EAAE,EAAE,EAClB,cAAc,EAAE,UAAU,EACtB,EAAE,GAAI,cAAc,EAAE,EAAE,EAC5B,GAAI,EAAE,WAAY,cAAc,EAAE,UAAU,EAC5C,KAAM,CACN,MAAO,GAET,MAAO,GAGF,YAAY,CACjB,IACA,QACY,CACZ,IAAM,KAAO,MAAQ,QAAU,KAAK,WAAa,SAC3C,EAAI,aAAa,WAAW,OAClC,OAAO,IAAI,YAAY,EAAE,OAAO,CAAC,EAG5B,YAAY,CACjB,IACA,QACA,OACA,WACY,CACZ,IAAM,KAAO,MAAQ,QAAU,KAAK,WAAa,SAC3C,EAAI,aAAa,WAAW,QAAQ,UAAU,aACpD,OAAO,IAAI,YAAY,EAAE,OAAO,CAAC,EAErC,CCrEK,MAAM,kBAAmB,CACtB,MACQ,MACA,IAAM,IAAI,kBACV,QAAU,IAAI,gBACvB,OAAiC,KACjC,IAAwB,KACvB,MACQ,UACA,cACA,eACT,gBAAmE,KAC1D,aAAuB,cAAc,qBACrC,kBAAoB,kBACpB,sBAAwB,sBAExC,WAAW,CAAC,KAAkC,CAC5C,KAAK,cAAgB,MAAM,YAAc,cAAc,YACvD,KAAK,MAAQ,IAAI,eAAe,KAAK,aAAa,EAClD,KAAK,UAAY,CACf,OAAQ,MAAM,WAAW,QAAU,cAAc,IAAI,QACrD,UAAW,MAAM,WAAW,WAAa,cAAc,IAAI,MAC3D,MAAO,MAAM,WAAW,OAAS,cAAc,IAAI,EACrD,EACA,KAAK,eAAiB,IAAI,eAAe,KAAK,cAAe,KAAK,UAAW,KAAK,GAAG,EACrF,KAAK,MAAQ,IAAI,aAAa,IAAI,EAClC,KAAK,MAAQ,KAAK,MAAM,WAAW,EAG9B,YAAY,CAAC,MAAoB,CACtC,KAAK,MAAQ,MAGR,qBAAqB,EAAY,CACtC,OAAO,KAAK,MAAM,sBAAsB,EAGnC,QAAQ,EAAY,CACzB,OAAO,KAAK,MAAM,SAAS,OAGhB,OAAM,CAAC,eAAuC,CAEzD,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,OAAO,cAAc,OAG5B,kBAAiB,CAAC,eAAuC,CAEpE,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,kBAAkB,cAAc,OAGvC,qBAAoB,EAAkB,CAEjD,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,qBAAqB,OAG5B,qBAAoB,CAAC,kBAA2B,kBAA0C,CAErG,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,qBAAqB,kBAAmB,iBAAiB,EAGtE,IAAI,EAAS,CAClB,KAAK,MAAM,KAAK,OAGL,WAAU,EAAkB,CAEvC,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,WAAW,OAGlB,QAAoE,EAA+B,CAE9G,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,QAAQ,OAGf,QAA0C,CAAC,MAAyB,CAE/E,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,QAAQ,KAAK,OAGpB,WAAU,CAAC,qBAAgD,CAEtE,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,WAAW,oBAAoB,OAGtC,WAAU,CAAC,WAAoB,SAAoC,CAC9E,MAAM,KAAK,MACX,IAAI,GAEI,OAAQ,mBAAsB,YAAY,iBAAiB,WAAY,cAAc,kBAAkB,EAI/G,GAFA,KAAK,eAAe,MAAM,EAEtB,OAAO,WAAa,UAAY,SAAS,SAAW,EACtD,MAAM,IAAI,YAAY,kBAClB,qCACA,oCACJ,EAGF,IAAM,IAAM,KAAK,eAAe,KAAK,MAAM,EAAK,OAAO,OAAO,KAAO,QAAW,OAC1E,QAAU,KAAK,eAAe,KAAK,MAAM,EAAI,KAAK,eAAe,aAAa,IAAM,OAAO,OAAO,CAAC,EAAI,OACvG,eAAiB,CAAC,GAAY,KAClC,KAAK,eAAe,KAAK,MAAM,EAAI,KAAK,eAAe,aAAa,IAAM,OAAO,OAAO,EAAG,GAAI,EAAE,EAAI,OAEvG,GAAI,kBAAmB,CACrB,GAAI,CACF,IAAM,IAAM,MAAM,sBAAsB,SAAU,cAAc,OAAO,OAAO,IAAI,EAAI,OAAO,OAAe,MAAM,EAC5G,IAAM,MAAM,KAAK,IAAI,UAAU,OAAO,OAAO,GAAI,OAAO,OAAO,WAAY,IAAK,GAAO,OAAO,EACpG,GAAI,OAAO,KAAK,IAAM,OAAO,KAAK,WAAY,CAC5C,IAAM,QAAU,eAAe,OAAO,OAAO,GAAI,OAAO,OAAO,UAAU,EACzE,MAAM,KAAK,IAAI,YAAqC,IAAK,OAAO,KAAK,GAAI,OAAO,KAAK,WAAY,OAAO,GAE1G,KAAM,CACN,MAAM,IAAI,YAAY,kDAAkD,EAE1E,GAAI,CAAC,KAAK,eAAe,KAAK,MAAM,GAAM,KAAK,eAAe,KAAK,MAAM,GAAK,OAAO,OAAO,MAAQ,QAAU,CAC5G,IAAM,IAAM,MAAM,sBAAsB,SAAU,cAAc,OAAO,OAAO,IAAI,EAAI,OAAO,OAAe,MAAM,EAC5G,IAAM,MAAM,KAAK,IAAI,UAAU,OAAO,OAAO,GAAI,OAAO,OAAO,WAAY,IAAK,GAAM,OAAO,EAC7F,SAA+C,QAC/C,aAAe,KAAK,eAAe,aADY,QACW,cAAc,wBAAwB,EAChG,QAAU,MAAM,KAAK,IAAI,QAAQ,IAAK,IAAK,YAAY,EACvD,aAAe,KAAK,eAAe,aAHY,QAGW,cAAc,yBAA0B,QAAQ,OAAQ,QAAQ,UAAU,EACpI,MAAQ,OAAO,KAAK,IAAM,OAAO,KAAK,WACxC,MAAM,KAAK,IAAI,YAAqC,IAAK,OAAO,KAAK,GAAI,OAAO,KAAK,WAAY,eAAe,OAAO,OAAO,GAAI,OAAO,OAAO,UAAU,CAAC,EAC3J,CAAC,EACC,KAAO,MAAM,KAAK,IAAI,YAAY,IAAK,MAAO,YAAY,EAEhE,KAAK,OAAS,CACZ,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,OAAO,OAAO,KACpB,OAAS,OAAO,OAAe,OAC/B,GAAI,QAAQ,OACZ,WAAY,QAAQ,WACpB,IAhBiD,QAiBjD,IAAK,EACP,EACA,IACF,EAEA,UAAK,OAAS,OAOhB,OAJA,KAAK,IAAM,KACX,KAAK,QAAQ,MAAM,EACnB,KAAK,QAAQ,EACb,KAAK,aAAa,IAAI,YAAY,IAAI,CAAC,EAChC,iBAGT,GAAI,CACF,IAAM,UAAY,MAAM,sBAAsB,SAAU,cAAc,OAAO,OAAO,IAAI,EAAI,OAAO,OAAe,MAAM,EAClH,eAAiB,MAAM,KAAK,IAAI,UAAU,OAAO,OAAO,GAAI,OAAO,OAAO,WAAY,UAAW,GAAM,OAAO,EAE9G,UAAY,MAAM,kBAAkB,OAAO,KAAK,SAAS,EAEzD,SAA+C,QAC/C,aAAe,KAAK,eAAe,aADY,QACW,cAAc,wBAAwB,GAC9F,OAAQ,YAAe,MAAM,KAAK,IAAI,QAAQ,eAAgB,UAAW,YAAY,EACvF,aAAe,KAAK,eAAe,aAHY,QAGW,cAAc,yBAA0B,OAAQ,UAAU,EAEpH,MAAQ,OAAO,KAAK,IAAM,OAAO,KAAK,WACxC,MAAM,KAAK,IAAI,YAAqC,eAAgB,OAAO,KAAK,GAAI,OAAO,KAAK,WAAY,eAAe,OAAO,OAAO,GAAI,OAAO,OAAO,UAAU,CAAC,EACtK,CAAC,EACC,KAAO,MAAM,KAAK,IAAI,YAAY,eAAgB,MAAO,YAAY,EAiB3E,OAfA,KAAK,OAAS,CACZ,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,GACN,OAAQ,EACR,GAAI,OACJ,WACA,IAjBiD,OAkBnD,EACA,IACF,EACA,KAAK,IAAM,MAAM,KAAK,IAAI,UAAU,OAAQ,WAAY,UAAW,GAAO,YAAY,EACtF,KAAK,QAAQ,MAAM,EACnB,KAAK,QAAQ,EACb,KAAK,aAAa,IAAI,gBAAgB,IAAI,CAAC,EACpC,uBACP,KAAM,CACN,MAAM,IAAI,YAAY,kDAAkD,QAI/D,MAAK,EAAkB,CAElC,OADA,MAAM,KAAK,MACJ,KAAK,MAAM,MAAM,EAGnB,OAAO,EAAS,CACrB,KAAK,MAAM,IAAI,KAAK,MAAO,EAGtB,aAAa,EAAS,CAC3B,GAAI,CAAC,KAAK,OAAQ,MAAM,IAAI,YAAY,0BAA0B,EAG7D,eAAe,EAAS,CAC7B,GAAI,CAAC,KAAK,IAAK,MAAM,IAAI,YAGpB,iBAAiB,EAAc,CACpC,IAAQ,KAAM,QAAW,KAAK,OAAQ,OAChC,IAAM,KAAK,QAAQ,MAAM,KAAM,MAAM,EAC3C,GAAI,CAAC,IAAK,MAAM,IAAI,YAAY,iBAAiB,EACjD,OAAO,SAGI,gBAAe,EAAkB,CAC5C,GAAI,KAAK,IAAK,OACd,GAAI,KAAK,sBAAsB,EAAG,CAChC,IAAM,IAAM,KAAK,kBAAkB,EACnC,MAAM,KAAK,iBAAiB,IAAK,GAAO,KAAK,eAAe,UAAU,OAAQ,KAAK,MAAO,CAAC,EACtF,KACL,IAAM,UAAY,MAAM,kBAAkB,OAAO,KAAK,SAAS,EAC/D,MAAM,KAAK,iBAAiB,UAAW,GAAO,KAAK,eAAe,UAAU,OAAQ,KAAK,MAAO,CAAC,QAIxF,iBAAgB,CAAC,IAAgB,YAAsB,IAAiC,CACnG,KAAK,IAAM,MAAM,KAAK,IAAI,UAAU,KAAK,OAAQ,OAAO,GAAI,KAAK,OAAQ,OAAO,WAAY,IAAK,YAAa,GAAG,EAG5G,cAAc,CAAC,OAA+B,CACnD,IAAM,EAAI,QAAQ,OACZ,EAAI,QAAQ,KAClB,GAAI,CAAC,GAAK,CAAC,EAAG,MAAM,IAAI,YAAY,0BAA0B,EAE9D,GAAI,CAAC,OAAO,UAAU,EAAE,MAAM,GAAK,EAAE,OAAS,EAAG,MAAM,IAAI,YAAY,uBAAuB,EAE9F,GAAI,EAAE,SAAW,GACf,GAAI,EAAE,OAAS,GAAI,MAAM,IAAI,YAAY,0CAA0C,EAEnF,QAAI,OAAO,EAAE,OAAS,UAAY,EAAE,KAAK,SAAW,EAClD,MAAM,IAAI,YAAY,wDAAwD,EAIlF,GAAI,QAAS,GAAK,OAAO,EAAE,MAAQ,UACjC,MAAM,IAAI,YAAY,oBAAoB,EAE5C,GAAI,QAAS,GAAK,EAAE,EAAE,MAAQ,SAAW,EAAE,MAAQ,UACjD,MAAM,IAAI,YAAY,oBAAoB,EAG5C,GAAI,OAAO,EAAE,KAAO,UAAY,EAAE,GAAG,SAAW,EAAG,MAAM,IAAI,YAAY,mBAAmB,EAC5F,GAAI,OAAO,EAAE,aAAe,UAAY,EAAE,WAAW,SAAW,EAAG,MAAM,IAAI,YAAY,2BAA2B,EACpH,GAAI,OAAO,EAAE,KAAO,UAAY,OAAO,EAAE,aAAe,SACtD,MAAM,IAAI,YAAY,sBAAsB,EAG9C,GAAI,CAGF,GAFA,cAAc,EAAE,EAAE,EAClB,cAAc,EAAE,UAAU,EACtB,EAAE,GAAI,cAAc,EAAE,EAAE,EAC5B,GAAI,EAAE,WAAY,cAAc,EAAE,UAAU,EAC5C,KAAM,CACN,MAAM,IAAI,YAAY,qBAAqB,QAIlC,mBAAkB,EAAqC,CAClE,GAAI,CAAC,KAAK,OAAQ,KAAK,IAAM,CAAC,KAAK,OAAQ,KAAK,WAAY,MAAO,CAAC,EACpE,IAAM,IAAM,KAAK,eAAe,UAAU,OAAQ,KAAK,MAAM,EAC7D,OAAO,MAAM,KAAK,IAAI,YACpB,KAAK,IAAM,KAAK,OAAQ,KAAK,GAAI,KAAK,OAAQ,KAAK,WAAY,GACjE,OAGW,cAAa,CACxB,KACA,GACA,IACe,CACf,IAAM,IAAM,MAAM,KAAK,IAAI,UAAU,GAAG,OAAO,GAAI,GAAG,OAAO,WAAY,IAAK,GAAM,MAAS,EACvF,MAAQ,GAAG,KAAK,IAAM,GAAG,KAAK,WAChC,MAAM,KAAK,IAAI,YAAqC,IAAK,GAAG,KAAK,GAAI,GAAG,KAAK,WAAY,MAAS,EAClG,CAAC,EAEC,IAA0C,QAC1C,QAAU,KAAK,eAAe,aADY,QACM,cAAc,wBAAwB,GACpF,OAAQ,YAAe,MAAM,KAAK,IAAI,QAAQ,IAAK,IAAK,OAAO,EAEjE,QAAU,KAAK,eAAe,aAJY,QAIM,cAAc,yBAA0B,OAAQ,UAAU,GACxG,GAAI,YAAe,MAAM,KAAK,IAAI,YAAY,IAAK,MAAO,OAAO,EAczE,GAZA,KAAK,OAAS,CACZ,OAAQ,CACN,EAAG,cAAc,yBACjB,KAAM,OAAS,SAAW,GAAK,GAAG,OAAO,KACzC,OAAQ,OAAS,SAAW,EAAI,GAAG,OAAO,OAC1C,GAAI,OACJ,WACA,IAd4C,OAe9C,EACA,KAAM,CAAE,GAAI,UAAW,CACzB,EAEI,OAAS,SAAU,CACrB,IAAM,UAAY,IAClB,KAAK,IAAM,MAAM,KAAK,IAAI,UAAU,OAAQ,WAAY,UAAW,GAAO,OAAO,EACjF,KAAK,QAAQ,MAAM,EACd,KACL,IAAM,UAAY,IAClB,KAAK,IAAM,MAAM,KAAK,IAAI,UAAU,OAAQ,WAAY,UAAW,GAAO,OAAO,EAGnF,KAAK,QAAQ,EAEjB,CCrTA,SAAwB,kBAAkB,CAAC,KAAsD,CAC/F,OAAO,IAAI,mBAAmB,IAAI",
  "debugId": "5E30BFFADC7B1C8B64756E2164756E21",
  "names": []
}